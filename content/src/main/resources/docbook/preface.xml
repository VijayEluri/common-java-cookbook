<?xml version="1.0" encoding="UTF-8"?>
<preface id="preface">
  <title>Preface</title>

  <para>In this book, you'll find information about a set of libraries
  developed within the Apache Commons (also referred to as "Commons"). Commons
  (<ulink url="${commons.site}">${commons.site}</ulink>) is a set of small,
  popular components which forms a Top-level Project at the Apache Software
  Foundation. Ranging from the elementary to the complex, many would consider
  some of these libraries indispensable to any Java project. These components
  are so widespread, they may already be on your classpath. If you develop an
  application using Wicket, Maven, Struts, Tomcat, Spring, Hibernate, or any
  other popular Java library, you likely have Commons Lang and Commons
  BeanUtils in your classpath. If you just installed Red Hat Enterprise Linux
  with the default configuration, you've got Commons libraries somewhere in
  <filename moreinfo="none">/usr</filename>. While Apache Commons may be
  everywhere, many are still unaware of the capabilities these components
  provide. This book is an attempt to provide some documentation for these
  popular components.</para>

  <para>This book focuses on tactical implementation details, answering such
  questions as: How do we parse XML? How do we serialize beans? Is there an
  easier way to work with Collections? How do we work with HTTP and keep track
  of cookies? In enterprise software development, the tactical is often
  sacrificed for the strategic. Consider a complex enterprise-scale system
  with a solid, well-conceived architecture. The strategic (or high-level)
  design appears reasonable from 40,000 feet, but as soon as you drill into
  the details, you notice that every component contains pages upon pages of
  unmaintainable and unnecessary code because the developers were not aware of
  some valuable time-saver like BeanUtils, Collections, or the Digester. Or,
  worse, the developer may have spent a week reimplementing most of the
  capabilities of Commons BeanUtils even though BeanUtils was already in the
  classpath. While a familiarity with Apache Commons may not directly affect
  the architecture of your application, knowing what Apache Commons can do
  often helps to inform decisions made at the class level.</para>

  <para>Few application developers would consider writing a custom XML parser,
  but developers will frequently write custom components that duplicate freely
  available libraries. Take, as an example, a set of static utility methods
  that seems to pop up in almost every complex project. A common process such
  as reading a file to a <literal moreinfo="none">String</literal> may be
  refactored into a <literal moreinfo="none">CommonFileUtils</literal> class,
  or turning a DOM <literal moreinfo="none">Document</literal> into a set of
  beans may be accomplished with a set of classes in some custom code. Apache
  Commons provides solutions to both of these problems and many more, and
  reading this book may help you avoid unnecessary wheel reinvention.</para>

  <para>Many people know of these components in a general sense, but few have
  the months or weeks necessary to sit down and read the relevant tutorials,
  FAQs, blogs, and archived mailing lists associated with each component. The
  amount of work involved in keeping up-to-date with an array of open source
  communities is not trivial. This is why I've tried to compact much of this
  information into easily accessible recipes. These recipes were written to
  provide you with the information you need to start using Commons in a few
  minutes, but the Discussion and See Also sections give you an opportunity to
  dig deeper into the motivation behind each Commons component if you need
  more information.</para>

  <para>The tools introduced herein save you serious time and provide you with
  a set of alternatives you may not currently be aware of. I wish I had read a
  book like this five years ago; it would have accelerated my learning and
  helped me to avoid some costly design decisions. Use this text as you will;
  if you are only interested in Commons Collections, you should be able to
  quickly familiarize yourself with Collections by browsing <link
  linkend="collections">Chapter 5</link>. On the other hand, if you are
  looking for a survey of some of the major projects in Apache Commons, read
  this book from start to finish. Part structured reference, part prose, the
  cookbook format lets you customize your reading experience, and I hope this
  book is as interesting to read as it was to write.</para>

  <sect1 id="preface-sect-inside" role="">
    <title>What's Inside</title>

    <para>This book covers components from Apache Commons, and a few projects
    outside of the Apache Software Foundation. This book covers the following
    components:</para>

    <itemizedlist>
      <listitem>
        <para>Apache Commons BeanUtils</para>
      </listitem>

      <listitem>
        <para>Apache Commons Betwixt</para>
      </listitem>

      <listitem>
        <para>Apache Commons CLI</para>
      </listitem>

      <listitem>
        <para>Apache Commons Codec</para>
      </listitem>

      <listitem>
        <para>Apache Commons Collections</para>
      </listitem>

      <listitem>
        <para>Apache Commons Configuration</para>
      </listitem>

      <listitem>
        <para>Apache Commons Digester</para>
      </listitem>

      <listitem>
        <para>Apache Commons HttpClient</para>
      </listitem>

      <listitem>
        <para>Apache Commons ID</para>
      </listitem>

      <listitem>
        <para>Apache Commons IO</para>
      </listitem>

      <listitem>
        <para>Apache Commons JEXL</para>
      </listitem>

      <listitem>
        <para>Apache Commons JXPath</para>
      </listitem>

      <listitem>
        <para>Apache Commons Lang</para>
      </listitem>

      <listitem>
        <para>Apache Commons Logging</para>
      </listitem>

      <listitem>
        <para>Apache Commons Math</para>
      </listitem>

      <listitem>
        <para>Apache Commons Net</para>
      </listitem>

      <listitem>
        <para>Apache Log4J</para>
      </listitem>

      <listitem>
        <para>Apache Velocity</para>
      </listitem>

      <listitem>
        <para>FreeMarker</para>
      </listitem>

      <listitem>
        <para>Apache Lucene</para>
      </listitem>

      <listitem>
        <para>Apache Slide</para>
      </listitem>
    </itemizedlist>

    <para>All of these projects are covered in detail in the following
    chapters. Here's what's in each chapter:</para>

    <variablelist>
      <varlistentry>
        <term><link linkend="lang">Chapter 1</link>, <citetitle>Supplements to
        the Java 2 Platform</citetitle></term>

        <listitem>
          <para>This chapter introduces Commons Lang. Automation of <literal
          moreinfo="none">toString( )</literal>, working with arrays,
          formatting and rounding dates, working with enumerations, generating
          identifiers, and measuring time are some of the topics discussed in
          this chapter. This chapter also covers the generation of unique
          identifiers with Commons ID.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link linkend="manipulate-text">Chapter 2</link>,
        <citetitle>Manipulating Text</citetitle></term>

        <listitem>
          <para>While Java does not have the extensive text manipulation
          capabilities of a scripting language like Perl, Commons Lang's
          <literal moreinfo="none">StringUtils</literal> has a number of
          utility methods that can be used to manipulate text. This chapter
          deals with <literal moreinfo="none">StringUtils</literal>, <literal
          moreinfo="none">WordUtils</literal>, and Commons Codec.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link linkend="beans">Chapter 3</link>,
        <citetitle>JavaBeans</citetitle></term>

        <listitem>
          <para>Beans appear throughout Java; from Apache Struts to Hibernate,
          beans are a unit of information in an object model. This chapter
          introduces Commons BeanUtils, one of the most widely used components
          from Apache Commons.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link linkend="functors">Chapter 4</link>,
        <citetitle>Functors</citetitle></term>

        <listitem>
          <para>Functors are a fundamental way of thinking about programming
          as a set of functional objects. Commons Collections introduced
          predicates, transformers, and closures, and functors, which can be
          used to model control structures and loops. This chapter
          demonstrates how one would apply functors to any program.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link linkend="collections">Chapter 5</link>,
        <citetitle>Collections</citetitle></term>

        <listitem>
          <para>Iterators, filtering with predicates, buffers, queues,
          bidirectional maps, type-safe collections, constraining collections,
          lazy maps, and set operations are a few of the topics introduced in
          this chapter. This chapter deals with Commons Collections, new
          collection types introduced, and the application of functors to
          various collections.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link linkend="xml">Chapter 6</link>,
        <citetitle>XML</citetitle></term>

        <listitem>
          <para>If you are constantly parsing or creating XML documents, this
          chapter introduces some alternatives to the standard parser APIs
          (SAX, DOM, and JDOM). This chapter introduces Commons Digester,
          Commons Betwixt, and Commons JXPath.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link linkend="app-infra">Chapter 7</link>,
        <citetitle>Application Infrastructure</citetitle></term>

        <listitem>
          <para>Commons Configuration is introduced as a way to parse
          properties files and XML configuration files. Other recipes in this
          chapter show how Commons CLI can be used to parse a complex set of
          required and optional command-line options. This chapter also
          details the configuration and use of Commons Logging and Apache
          Log4J.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link linkend="math">Chapter 8</link>,
        <citetitle>Math</citetitle></term>

        <listitem>
          <para>This chapter focuses on simple mathematical capabilities in
          both Commons Lang and Commons Math. This chapter introduces classes
          to work with fractions, complex numbers, matrices, and simple
          univariate statistics.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link linkend="templating">Chapter 9</link>,
        <citetitle>Templating</citetitle></term>

        <listitem>
          <para>This chapter deals with simple expression languages such as
          Commons JEXL to more complex templating engines such as Apache
          Velocity and FreeMarker. This chapter also demonstrates the
          integration of both Velocity and FreeMarker with a J2EE servlet
          container such as Apache Tomcat.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link linkend="io-network">Chapter 10</link>, <citetitle>I/O and
        Networking</citetitle></term>

        <listitem>
          <para>This chapter introduces Commons IO, which contains a number of
          utilities for working with streams and files, and Commons Net, which
          contains simple clients for the FTP, POP, and SMTP protocols.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link linkend="http-webdav">Chapter 11</link>, <citetitle>HTTP
        and WebDAV</citetitle></term>

        <listitem>
          <para>If you need to communicate with anything over HTTP, read this
          chapter, which deals with Apache HttpClient and the WebDAV client
          library from Apache Slide.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><link linkend="searching-filtering">Chapter 12</link>,
        <citetitle>Searching and Filtering</citetitle></term>

        <listitem>
          <para>Commons JXPath can be used to apply XPath expressions to
          collections and object graphs. Apache Lucene is a fully functional
          search engine that can index any structured document. This chapter
          demonstrates the use of Lucene with Commons Digester.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>Limited time and resources forced me to make some decisions about
    which projects to include in this text. Projects like Velocity,
    FreeMarker, and Log4J, while not Commons components, were included because
    they fit the mold of a small, easily reusable component. Other Commons
    components were not included in this book because they were still being
    developed at the time of writing, or because a short recipe would have
    been impossible without a detailed 30-page introduction. Commons DbUtils,
    DBCP, Discovery, Jelly, Launcher, Modeler, Pool, Primitives, Chain, and
    promising sandbox components could fill another entire volume. Some
    projects, such as Apache HiveMind, started as components in the Commons
    Sandbox only to be promoted directly to subproject status of the Apache
    project. Classification of projects and components in Apache can also be
    somewhat arbitrary; Apache ORO and Apache RegExp would both seem to be
    prime candidates for the Apache Commons, but they are both subprojects of
    Apache. Other projects, such as Apache Commons HttpClient, have recently
    been promoted to be subprojects of Apache, leaving the Commons entirely.
    Think of this book as focusing on Apache Commons with some other projects
    thrown in to liven up the discussion. I apologize in advance if I left
    your favorite project out.</para>

    <para>Writing a book about a series of frequently released components is
    reminiscent of a game called whack-a-mole. Just when you finish updating a
    chapter for a new release, another component has been released. On
    average, one commons component is released every one or two weeks;
    therefore, a few of the versions in this book may be obsolete as soon as
    this book hits the shelves. In general, Apache Commons makes a concerted
    effort to preserve backward compatibility and keep a stable public
    interface. Lessons learned on Commons BeanUtils 1.6 should remain
    applicable to Commons BeanUtils 1.7. If you find that a more recent
    version of a component has been released, you should download that more
    recent version and check the Discursive site for updates related to this
    book.</para>
  </sect1>

  <sect1 id="preface-sect-conventions" role="">
    <title>Conventions Used in This Book</title>

    <para>I'll use a number of conventions you should know about in this book.
    For example, menu items are separated with an<symbol remap="8594"
    role="unicode">→</symbol> like this: File<symbol remap="8594"
    role="unicode">→</symbol> New<symbol remap="8594"
    role="unicode">→</symbol> Project. To make them stand out, new lines of
    code will be displayed highlighted when they're added. Example code is
    often presented out of context; instead of developing an entire class,
    only the relevant block of code is presented. Most examples will include
    the necessary import statements for Commons-relevant classes, and other
    <literal moreinfo="none">import</literal> statements will be implied. When
    code is omitted or implied, it will be represented by ellipses:</para>

    <programlisting format="linespecific" id="I__tt3">import org.apache.commons.digester.Digester;
...
Digester digester = new Digester( );
digester.doSomething( );</programlisting>

    <para>In addition, the following typographical conventions are also used
    in this book:</para>

    <variablelist>
      <varlistentry>
        <term><emphasis>Italic</emphasis></term>

        <listitem>
          <para>Indicates new terms, URLs, email addresses, filenames, file
          extensions, pathnames, directories, and Unix utilities.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><literal moreinfo="none">Constant width</literal></term>

        <listitem>
          <para>Indicates commands, options, switches, variables, types,
          classes, namespaces, methods, modules, properties, parameters,
          values, objects, events, event handlers, and XML tags.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><replaceable>Constant width italic</replaceable></term>

        <listitem>
          <para>Shows text that should be replaced with user-supplied
          values.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><userinput moreinfo="none">Constant width
        bold</userinput></term>

        <listitem>
          <para>Highlights important text within code examples.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <tip id="jakartackbk-PREFACE-2-NOTE-39" role="ora">
      <para>This icon signifies a tip, suggestion, or general note.</para>
    </tip>

    <warning id="jakartackbk-PREFACE-2-NOTE-40" role="ora">
      <para>This icon indicates a warning or caution.</para>
    </warning>
  </sect1>

  <sect1 id="preface-sect-what-you-need" role="">
    <title>What You'll Need</title>

    <para>To experiment with the various libraries introduced in this book,
    you will need the J2SE 1.5 SDK, which can be obtained from <ulink
    url="http://java.sun.com">http://java.sun.com</ulink>. The examples in
    this book were developed in Eclipse, which can be downloaded from the
    Eclipse project site at <ulink
    url="http://www.eclipse.org">http://www.eclipse.org</ulink>. All of the
    examples in this book can be compiled and packaged using Apache Maven. For
    more information about Apache Maven, see <ulink
    url="http://www.sonatype.com/books/maven-book">Maven: The Definitive
    Guide</ulink> a free, online book available from Sonatype.</para>

    <para>Each chapter contains instructions for downloading the various
    Apache Commons components; to download any component from Apache Commons,
    go to the Apache Commons page at <ulink
    url="http://commons.apache.org">http://commons.apache.org/</ulink> and
    click on "Binaries" under "Download" in the left menu.</para>
  </sect1>

  <sect1>
    <title>Book Examples</title>

    <para>This book's examples can be downloaded from <ulink
    url="http://www.discursive.com/books/cjcook/cjcook-examples-${project.version}.zip">http://www.discursive.com/books/cjcook/cjcook-examples-${project.version}.zip</ulink>.</para>

    <!--TODO: You might want to expand upon this a bit, no?-->
  </sect1>

  <sect1 id="preface-sect-community" role="">
    <title>The Apache Commons Community</title>

    <para>The Apache community and the larger community of the Apache Software
    Foundation is committed to developing open source software. The Apache
    Software Foundation is a nonprofit corporation registered in Delaware that
    supports ongoing collaborative software development according to a set of
    simple ideals: transparency, meritocracy, consensus, and mutual respect.
    To learn more about the foundation, start at the Frequently Asked
    Questions page on www.apache.org (<ulink
    url="http://www.apache.org/foundation/faq.html">http://www.apache.org/foundation/faq.html</ulink>).
    Commons is a project under the Apache Software Foundation, and it is
    managed by what is known as a Project Management Committee (PMC). This
    committee manages a number of Apache subprojects including the Apache
    Commons.</para>

    <para>The Jakarta community and Apache XML community both had tremendous
    growth spurts from 1999 to 2003, with both projects becoming dominant
    forces in open source Java. Tomcat, Struts, Xerces, Xalan, Ant, Cocoon,
    and other projects were embraced by the larger community and Java
    developed a very strong association with open source because of the
    influence of Jakarta. Toward the end of this growth spurt, the corporate
    structure of Apache required a certain level of oversight and
    accountability which could not be achieved in an umbrella project like
    Jakarta's hundreds of committers. A decision was made to encourage Jakarta
    subprojects to move toward smaller, more focused PMCs. One of the first
    projects to leave Jakarta was Apache Ant, and other projects such as
    Maven, Struts, and Log4j followed suit. This new, more nimble approach to
    the structure of collaborative software development avoids the creation of
    multiple management layers between project participants and the PMC.
    </para>

    <para>In the past few years (2004-2009), Apache has made way for a new
    generation of projects that have set the standard for open source,
    including Directory, Derby, Lucene, Maven, CouchDB, Wicket, and Abdera
    among others. The community which was once Jakarta has been slowly
    evaporating over time into separate top-level projects, and Jakarta
    Commons finally made the switch to Apache Commons in 2007. Compared to the
    organizational structure of Jakarta in 2002 and 2003, this new approach of
    requiring more focused top-level projects have proven beneficial over
    time. Jakarta had become something of a "star stage" for political
    advocacy, and the general Jakarta discussion list was a series of
    continuous flame wars toward the end of that community. While some Apache
    projects are still characterized by endless procedural bickering, they are
    largely the exception. The more focused approach of having top level
    projects focused on a single piece of software or a limited set of related
    components allows for a more scalable structure. As a result, the number
    of projects in the Apache Software Foundation has grow substantially over
    just the last five years.</para>

    <para>If you find the components in this book helpful, I encourage you to
    take some time to observe the developer mailing list for Apache Commons.
    The ASF is (mostly) transparent, and this means that the general public
    has a window into the collaborative development process that is used to
    create a large body of great software. I would encourage any developer to
    take an interest in a piece of software and watch the development process.
    Follow the decisions, releases, arguments, flame-wars, and evolution of
    something like Apache Commons and you can see for yourself what works and
    what doesn't work. This is also a great way to keep yourself informed of
    the changes and direction of certain projects. If you find Apache Commons
    (or any other Apache software) useful, you should consider taking a little
    bit of time to help a fellow user on the user mailing list or submit
    documentation patches. If you find a typo or a bug, file a report on
    Apache's Jira installation (<ulink
    url="http://issues.apache.org/jira">http://issues.apache.org/jira</ulink>).</para>

    <para>There is always a need for greater unit test coverage, and any time
    you find an inconsistency in code you should file a bug. Contributions can
    come in many forms — answering user questions, writing documentation,
    writing unit tests, submitting patches, or providing feedback. All of
    these contributions help sustain a living community. If you find yourself
    unable to participate in the community, you can make a small (possibly
    tax-deductible) donation to the Apache Software Foundation to help offset
    the cost of infrastructure and bandwidth (<ulink
    url="http://www.apache.org/foundation/contributing.html">http://www.apache.org/foundation/contributing.html</ulink>).</para>
  </sect1>

  <sect1 id="preface-sect-license" role="">
    <title>The Apache Software License</title>

    <para>Apache Commons components are released under the Apache Software
    License, Version 2.0. If you want to read this license, read this license
    on the Open Source Initiative's web site here <ulink
    url="http://www.opensource.org/licenses/apache2.0.php">http://www.opensource.org/licenses/apache2.0.php</ulink>.</para>

    <para>There's a good chance that, if you are reading this book, you are
    not a lawyer. If you are wondering what the Apache License, Version 2.0
    means, the Apache Software Foundation has assembled a very helpful
    Frequently Asked Questions (FAQ) page about the license available here
    <ulink
    url="http://www.apache.org/foundation/licence-FAQ.html">http://www.apache.org/foundation/licence-FAQ.html</ulink>.
    Here's is the answer to the question "I am not a lawyer. What does it all
    mean?"</para>

    <para><blockquote>
        <para><emphasis>[This license] allows you to:</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>freely download and use Apache software, in whole or in
            part, for personal, company internal, or commercial
            purposes;</para>
          </listitem>

          <listitem>
            <para>use Apache software in packages or distributions that you
            create.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>It forbids you to:</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>redistribute any piece of Apache-originated software without
            proper attribution;</para>
          </listitem>

          <listitem>
            <para>use any marks owned by The Apache Software Foundation in any
            way that might state or imply that the Foundation endorses your
            distribution;</para>
          </listitem>

          <listitem>
            <para>use any marks owned by The Apache Software Foundation in any
            way that might state or imply that you created the Apache software
            in question.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>It requires you to:</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>include a copy of the license in any redistribution you may
            make that includes Apache software;</para>
          </listitem>

          <listitem>
            <para>provide clear attribution to The Apache Software Foundation
            for any distributions that include Apache software.</para>
          </listitem>
        </itemizedlist>

        <para><emphasis>It does not require you to:</emphasis></para>

        <itemizedlist>
          <listitem>
            <para>include the source of the Apache software itself, or of any
            modifications you may have made to it, in any redistribution you
            may assemble that includes it;</para>
          </listitem>

          <listitem>
            <para>submit changes that you make to the software back to the
            Apache Software Foundation (though such feedback is
            encouraged).</para>
          </listitem>
        </itemizedlist>
      </blockquote></para>
  </sect1>

  <sect1 id="preface-sect-feedback" role="">
    <title>We'd Like to Hear from You</title>

    <para>Please address comments and questions concerning this book to the
    publisher:</para>

    <simplelist type="vert">
      <member>${organization.name}</member>

      <member>${organization.address}</member>
    </simplelist>
  </sect1>
</preface>