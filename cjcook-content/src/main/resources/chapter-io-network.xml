<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<chapter id="io-network" label="10">
  <title>I/O and Networking</title>

  <sect1 id="io-network-sect-intro">
    <title>Introduction</title>

    <para>If you've ever had to copy a <literal moreinfo="none">File</literal>
    or copy the contents of an <literal moreinfo="none">InputStream</literal>
    to an <literal moreinfo="none">OutputStream</literal>, you've probably
    wondered why Java goes out of its way to make things difficult. Java I/O
    is not a terribly complex subject, but it does have a knack for turning
    simpler tasks into complex nests of heavily wrapped <literal
    moreinfo="none">Reader</literal>s and streams. Commons IO fills a few gaps
    in Java's I/O and networking capabilities by providing utilities and
    methods to copy streams, copy files, touch files, recursively delete
    directories, and safely close <literal moreinfo="none">Reader</literal>s
    and streams. If you are working with <literal
    moreinfo="none">Reader</literal>, <literal
    moreinfo="none">Writer</literal>, <literal
    moreinfo="none">InputStream</literal>, or <literal
    moreinfo="none">OutputStream</literal>, you should take a look at <literal
    moreinfo="none">IOUtils</literal> and <literal
    moreinfo="none">CopyUtils</literal>; they may save you a few lines of
    tedious code.</para>

    <para>Commons IO also provides a set of simple <literal
    moreinfo="none">FilenameFilter</literal> implementations, which can be
    used to selectively list files or directories. In addition to Commons IO's
    <literal moreinfo="none">FilenameFilter</literal> implementations, Jakarta
    ORO's <literal moreinfo="none">GlobFilenameFilter</literal> and <literal
    moreinfo="none">Perl5FilenameFilter</literal> are presented to introduce
    you to more complex filters involving expressions. ORO is a subproject of
    Jakarta that provides support for Perl 5 regular expressions and glob
    expressions. A glob expression is commonly used when listing files in a
    directory; for example, the expression, <filename
    moreinfo="none">*.xml</filename>, is a glob expression that matches every
    file that ends in <filename moreinfo="none">.xml</filename>. While Java
    1.4 provides support for regular expressions, there are subtle differences
    between the regular expression syntax supported by Java 1.4 and the
    regular expression syntax supported in Perl 5. You can learn more about
    the differences between Perl5 regular expressions supported by ORO and
    regular expressions supported by Java 1.4 by reading the ORO project page
    at <ulink
    url="http://jakarta.apache.org/oro">http://jakarta.apache.org/oro</ulink>.
    Take a look at Jakarta ORO if your application needs to work with globs
    and complex regular expressions.</para>

    <para>Commons Net contains simple clients for common protocols, such as
    FTP, POP3, and SMTP. Using Commons Net, you can retrieve or transfer files
    to an FTP server with a very small amount of code. Sun provides a very
    capable set of classes to send and retrieve mail using POP and SMTP, but
    the <literal moreinfo="none">javax.mail</literal> API brings a certain
    amount of complexity and overhead that might not make sense for an
    application sending a simple email message. Commons Net provides a
    lightweight SMTP client, which can be used to send a simple email message
    in a few lines of code without introducing the complexity of <literal
    moreinfo="none">javax.mail</literal>. Commons Net also contains a very
    straightforward POP3 client, which can be used to check a POP mailbox for
    incoming messages. In addition to FTP, POP, and SMTP, Commons Net contains
    simple clients for Trivial File Transfer Protocol (TFTP), Telnet, Finger,
    and NNTP.</para>
  </sect1>

  <sect1 id="io-network-sect-obtaining" label="10.1" role="Recipe">
    <title>Obtaining Commons IO</title>

    <sect2>
      <title>Problem</title>

      <para>You need to use <indexterm id="io-network-ITERM-3026"
          significance="normal">
          <primary>Commons IO</primary>

          <secondary>downloading</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3027"
          significance="normal">
          <primary>downloading</primary>

          <secondary>Commons IO</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3028"
          significance="normal">
          <primary>I/O</primary>

          <secondary>Commons IO</secondary>

          <tertiary>downloading</tertiary>
        </indexterm> Commons IO.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>To use Commons IO in a Maven 2 project, add the following
      dependency to your project's <filename>pom.xml</filename>:</para>

      <example id="io-network-ex-add-depend-io">
        <title>Adding a Dependency on Commons IO</title>

        <programlisting language="xml">    &lt;dependency&gt;
        &lt;groupId&gt;commons-io&lt;/groupId&gt;
        &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
        &lt;version&gt;1.4&lt;/version&gt;
    &lt;/dependency&gt;
</programlisting>
      </example>

      <para>If you are not sure what this means, I'd suggest reading <ulink
      url="http://www.sonatype.com/books/maven-book">Maven: The Complete
      Reference</ulink>. When you depend on a library in Maven 2, all you need
      to do is add the dependency <varname>groupId</varname>,
      <varname>artifactId</varname>, and <varname>version</varname> to your
      project's dependencies. Once you do this, Maven 2 will download the
      dependency and make it available on your project's classpath.</para>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>Commons IO contains a few utilities for simplifying a number of
      common I/O tasks. <literal moreinfo="none">CopyUtils</literal> and
      <literal moreinfo="none">IOUtils</literal> in the <literal
      moreinfo="none">org.apache.commons.io</literal> package provide a suite
      of static utility methods for working with streams and readers. <literal
      moreinfo="none">org.apache.commons.io.FileUtils</literal> provides
      static utility methods to help with common <literal
      moreinfo="none">File</literal> operations, such as touching a file,
      recursive deletion of directories, and reading files. The <literal
      moreinfo="none">org.apache.commons.io.filefilter</literal> package
      contains implementations of <literal
      moreinfo="none">FilenameFilter</literal>, such as <literal
      moreinfo="none">SuffixFileFilter</literal>, which accepts files with a
      specified name suffix.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For more information about the Commons IO project, see the project
      page at <ulink
      url="http://commons.apache.org/io">http://commons.apache.org/io</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-copying" label="10.2" role="Recipe">
    <title>Copying Streams, byte[ ], Readers, and Writers</title>

    <sect2>
      <title>Problem</title>

      <para>You need to copy a stream, <literal
      moreinfo="none">byte[]</literal>, <literal
      moreinfo="none">Reader</literal>, <indexterm id="io-network-ITERM-3029"
          significance="normal">
          <primary>Commons IO</primary>

          <secondary>CopyUtils</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3030"
          significance="normal">
          <primary>CopyUtils</primary>
        </indexterm> <indexterm id="io-network-ITERM-3031"
          significance="normal">
          <primary>I/O</primary>

          <secondary>CopyUtils</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3032"
          significance="normal">
          <primary>streams</primary>

          <secondary>copying</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3033"
          significance="normal">
          <primary>readers</primary>

          <secondary>copying</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3034"
          significance="normal">
          <primary>writers</primary>

          <secondary>copying</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3035"
          significance="normal">
          <primary>strings</primary>

          <secondary>copying</secondary>
        </indexterm>or <literal moreinfo="none">Writer</literal>. For example,
      you need to copy the content from an <literal
      moreinfo="none">InputStream</literal> or <literal
      moreinfo="none">Reader</literal> to a <literal
      moreinfo="none">Writer</literal>, or you need to copy a <literal
      moreinfo="none">String</literal> to an <literal
      moreinfo="none">OutputStream</literal>.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use <literal moreinfo="none">CopyUtils</literal> from Commons IO
      to copy the contents of an <literal
      moreinfo="none">InputStream</literal>, <literal
      moreinfo="none">Reader</literal>, <literal
      moreinfo="none">byte[]</literal>, or <literal
      moreinfo="none">String</literal> to an <literal
      moreinfo="none">OutputStream</literal> or a <literal
      moreinfo="none">Writer</literal>. The following code demonstrates the
      use of <literal moreinfo="none">CopyUtils</literal> to copy between an
      <literal moreinfo="none">InputStream</literal> and a <literal
      moreinfo="none">Writer</literal>:</para>

      <programlisting format="linespecific" id="I_10_tt399" language="java">import org.apache.commons.io.CopyUtils;

try {
    Writer writer = new FileWriter( "test.dat" );
    InputStream inputStream = 
        getClass( ).getResourceAsStream("./test.resource");
<userinput moreinfo="none">    CopyUtils.copy( inputStream, writer );</userinput>
    writer.close( );
    inputStream.close( );
} catch (IOException e) {
    System.out.println( "Error copying data" );
}</programlisting>

      <para>The previous example reads <filename
      moreinfo="none">test.resource</filename> using an <literal
      moreinfo="none">InputStream</literal>, which is copied to a <literal
      moreinfo="none">FileWriter</literal> using <literal
      moreinfo="none">CopyUtils.copy( )</literal>.</para>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>If you need to copy information from a <literal
      moreinfo="none">Reader</literal> or <literal
      moreinfo="none">InputStream</literal> to a <literal
      moreinfo="none">String</literal>, use <literal
      moreinfo="none">IOUtils.toString( )</literal>. The following example
      opens an <literal moreinfo="none">InputStream</literal> <indexterm
          id="io-network-ITERM-3036" significance="normal">
          <primary>InputStream</primary>
        </indexterm> from a <literal moreinfo="none">URL</literal> and copies
      the contents to a <literal moreinfo="none">String</literal>:</para>

      <programlisting format="linespecific" id="I_10_tt400" language="java">import org.apache.commons.io.IOUtils;

URL url = new URL( "http://www.slashdot.org" );
try {
    InputStream inStream = url.openStream( );
    <emphasis role="bold">String contents = IOUtils.toString( inStream );</emphasis>
    System.out.println( "Slashdot: " + contents );
} catch ( IOException ioe ) {
    // handle this exception
}</programlisting>

      <para>Because <literal moreinfo="none">CopyUtils</literal> uses a 4 KB
      buffer to copy between the source and the destination, you do
      <emphasis>not</emphasis> need to supply buffered streams or readers to
      the <literal moreinfo="none">copy( )</literal> method. When using
      <literal moreinfo="none">CopyUtils.copy( )</literal>, make sure to
      <literal moreinfo="none">flush( )</literal> and <literal
      moreinfo="none">close( )</literal> any streams, <literal
      moreinfo="none">Readers</literal>, or <literal
      moreinfo="none">Writers</literal> passed to <literal
      moreinfo="none">copy( )</literal>.</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-closing" label="10.3" role="Recipe">
    <title>Closing Streams, Readers, and Writers</title>

    <sect2>
      <title>Problem</title>

      <para>You need to close an <indexterm class="startofrange"
          id="io-network-ITERM-3037" significance="normal">
          <primary>Commons IO</primary>

          <secondary>closing</secondary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3038" significance="normal">
          <primary>closing, Commons IO</primary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3039" significance="normal">
          <primary>I/O</primary>

          <secondary>Commons IO</secondary>

          <tertiary>closing</tertiary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3040" significance="normal">
          <primary>streams</primary>

          <secondary>closing</secondary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3041" significance="normal">
          <primary>readers</primary>

          <secondary>closing</secondary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3042" significance="normal">
          <primary>writers</primary>

          <secondary>closing</secondary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3043" significance="normal">
          <primary>strings</primary>

          <secondary>closing</secondary>
        </indexterm> <literal moreinfo="none">InputStream</literal>, <literal
      moreinfo="none">OutputStream</literal>, <literal
      moreinfo="none">Reader</literal>, or <literal
      moreinfo="none">Writer</literal>, and you want to avoid catching an
      <literal moreinfo="none">IOException</literal> in a <literal
      moreinfo="none">finally</literal> block.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use <literal moreinfo="none">IOUtils.closeQuietly()</literal>
      <indexterm id="io-network-ITERM-3044" significance="normal">
          <primary>IOUtils.closeQuietly( ) methods</primary>
        </indexterm> <indexterm id="io-network-ITERM-3045"
          significance="normal">
          <primary>methods</primary>

          <secondary>IOUtils.closeQuietly( )</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3046"
          significance="normal">
          <primary>blocks, finally</primary>
        </indexterm> <indexterm id="io-network-ITERM-3047"
          significance="normal">
          <primary>exceptions, finally block</primary>
        </indexterm> <indexterm id="io-network-ITERM-3048"
          significance="normal">
          <primary>finally block</primary>
        </indexterm> to close an <literal
      moreinfo="none">InputStream</literal>, <literal
      moreinfo="none">OutputStream</literal>, <literal
      moreinfo="none">Reader</literal>, or <literal
      moreinfo="none">Writer</literal> without having to test for <literal
      moreinfo="none">null</literal> or deal with an <literal
      moreinfo="none">IOException</literal>. The following code demonstrates
      the use of <literal moreinfo="none">closeQuietly( )</literal> to avoid a
      nasty <literal moreinfo="none">try</literal>/<literal
      moreinfo="none">catch</literal> within a <literal
      moreinfo="none">finally</literal> block:</para>

      <programlisting format="linespecific" id="I_10_tt401" language="java">import org.apache.commons.io.IOUtils
import org.apache.commons.io.CopyUtils

Reader reader = null;
String result = "":

try {
    File file = new File( "test.dat" );
    reader = new FileReader( file );
    result = CopyUtils.toString( reader );
} catch( IOException ioe ) {
    System.out.println( "Unable to copy file test.dat to a String." );
} finally {
    IOUtils.closeQuietly( reader );
}</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>It is always a good idea to close streams, readers, and writers in
      <literal moreinfo="none">finally</literal> blocks because you can
      guarantee that a system will release I/O resources even if an exception
      is thrown. A call to <literal moreinfo="none">close( )</literal>
      <indexterm id="io-network-ITERM-3049" significance="normal">
          <primary>close( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3050"
          significance="normal">
          <primary>methods</primary>

          <secondary>close( )</secondary>
        </indexterm> releases resources associated with the stream, but
      because <literal moreinfo="none">close( )</literal> can throw an
      <literal moreinfo="none">IOException</literal> <indexterm
          id="io-network-ITERM-3051" significance="normal">
          <primary>IOException, finally blocks</primary>
        </indexterm>, you need to either surround your call to <literal
      moreinfo="none">close( )</literal> with a <literal
      moreinfo="none">try</literal>/<literal moreinfo="none">catch</literal>
      block, or declare that your method throws an <literal
      moreinfo="none">IOException</literal>. This problem is best illustrated
      by the following code, which closes a <literal
      moreinfo="none">Reader</literal> and <literal
      moreinfo="none">Writer</literal> without the help of <literal
      moreinfo="none">IOUtils</literal>:</para>

      <programlisting format="linespecific" id="I_10_tt402" language="java">Reader reader = null;
Writer writer = null;
String result = "":

try {
    File file = ew File("test.dat");
    reader = new FileReader( file );
    writer = new StringWriter( );
    CopyUtils.copy( reader, writer );
    result = writer.toString( );
} catch( IOException ioe ) {
    System.out.println( "A serious problem has happened" );
} finally {
    try {
        if( reader != null ) {
            reader.close( );
        }
    } catch( IOException ioe ) {
        System.out.println( "There has been a problem closing the reader." );
    }
    try {
        if( writer != null ) {
            writer.close( );
        }
    } catch( IOException ioe ) {
        System.out.println( "There has been a problem closing the writer." );
    }
}</programlisting>

      <para>The code within the <literal moreinfo="none">finally</literal>
      block is as tedious to read as it is to write. To avoid a <literal
      moreinfo="none">NullPointerException</literal> <indexterm
          id="io-network-ITERM-3052" significance="normal">
          <primary>NullPointerException</primary>
        </indexterm>, both the <literal moreinfo="none">Reader</literal> and
      <literal moreinfo="none">Writer</literal> need to be compared with
      <literal moreinfo="none">null</literal>, and both <literal
      moreinfo="none">Reader</literal> and <literal
      moreinfo="none">Writer</literal> need separate <literal
      moreinfo="none">try</literal>/<literal moreinfo="none">catch</literal>
      blocks to avoid a situation where a <literal
      moreinfo="none">Writer</literal> remains open because of a problem
      closing the <literal moreinfo="none">Reader</literal>. Another variation
      on this theme is to surround the entire example with a single <literal
      moreinfo="none">try</literal>/<literal moreinfo="none">catch</literal>
      for <literal moreinfo="none">IOException</literal>:</para>

      <programlisting format="linespecific" id="I_10_tt403">try {
    Reader reader = null;
    Writer writer = null;
    String result = "":

    try {
        File file = new File("test.dat");
        reader = new FileReader( file );
        writer = new StringWriter( );
        CopyUtils.copy( reader, writer );
        result = writer.toString( );
    } finally {
        if( reader != null ) {
            reader.close( );
        }
        if( writer != null ) {
            writer.close( );
        }
    }
} catch( IOException ioe ) {
    System.out.println( "There was an I/O exception." );
}</programlisting>

      <para>While this looks manageable, the <literal
      moreinfo="none">try</literal>/<literal moreinfo="none">catch</literal>
      for <literal moreinfo="none">IOException</literal> has been expanded to
      cover the entire example, just to avoid catching an exception in a
      <literal moreinfo="none">finally</literal> block. In the previous
      sample, when an <literal moreinfo="none">IOException</literal> was
      thrown, the exception was handled within a few lines of its origin,
      making it easier to provide meaningful context in an exception message.
      Expanding the scope of a <literal moreinfo="none">try</literal>/<literal
      moreinfo="none">catch</literal> block and introducing a nested <literal
      moreinfo="none">try</literal>/<literal
      moreinfo="none">catch</literal>/<literal
      moreinfo="none">finally</literal> is an overly complex solution for what
      should be a relatively straightforward task—closing a <literal
      moreinfo="none">Reader</literal> and a <literal
      moreinfo="none">Writer</literal>. There is a more subtle problem with
      this second approach, as well; if an <literal
      moreinfo="none">IOException</literal> is thrown by <literal
      moreinfo="none">reader.close( )</literal> in the <literal
      moreinfo="none">finally</literal> block, <literal
      moreinfo="none">writer.close( )</literal> may never be executed—a
      possible resource leak.</para>

      <para><literal moreinfo="none">IOUtils.closeQuietly( )</literal> allows
      you to ignore this dilemma entirely if you accept the assumption that a
      problem closing a stream can be safely ignored. If there is a problem
      closing an <literal moreinfo="none">InputStream</literal>, <literal
      moreinfo="none">OutputStream</literal>, <literal
      moreinfo="none">Reader</literal>, or <literal
      moreinfo="none">Writer</literal>, it is unlikely that you will be able
      to take any corrective action in a <literal
      moreinfo="none">finally</literal> block. <literal
      moreinfo="none">IOUtils.closeQuietly()</literal> takes a reference to an
      <literal moreinfo="none">InputStream</literal>, <literal
      moreinfo="none">OutputStream</literal>, <literal
      moreinfo="none">Reader</literal>, or <literal
      moreinfo="none">Writer</literal>, tests for <literal
      moreinfo="none">null</literal>, and swallows any <literal
      moreinfo="none">IOException</literal> that may be thrown <indexterm
      class="endofrange" id="io-network-ITERM-3053" significance="normal"
      startref="io-network-ITERM-3037"></indexterm> <indexterm
      class="endofrange" id="io-network-ITERM-3054" significance="normal"
      startref="io-network-ITERM-3038"></indexterm> <indexterm
      class="endofrange" id="io-network-ITERM-3055" significance="normal"
      startref="io-network-ITERM-3039"></indexterm> <indexterm
      class="endofrange" id="io-network-ITERM-3056" significance="normal"
      startref="io-network-ITERM-3040"></indexterm> <indexterm
      class="endofrange" id="io-network-ITERM-3057" significance="normal"
      startref="io-network-ITERM-3041"></indexterm> <indexterm
      class="endofrange" id="io-network-ITERM-3058" significance="normal"
      startref="io-network-ITERM-3042"></indexterm> <indexterm
      class="endofrange" id="io-network-ITERM-3059" significance="normal"
      startref="io-network-ITERM-3043"></indexterm>in the process of closing a
      stream or reader.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>This recipe used <literal moreinfo="none">CopyUtils</literal>,
      which was demonstrated in <link linkend="io-network-sect-copying">Recipe
      10.2</link>.</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-printing-human-readable" label="10.4"
         role="Recipe">
    <title>Printing a Human-Readable File Size</title>

    <sect2>
      <title>Problem</title>

      <para>You need to display <indexterm id="io-network-ITERM-3060"
          significance="normal">
          <primary>Commons IO</primary>

          <secondary>printing</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3061"
          significance="normal">
          <primary>printing</primary>

          <secondary>Commons IO</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3062"
          significance="normal">
          <primary>I/O</primary>

          <secondary>Commons IO</secondary>

          <tertiary>printing</tertiary>
        </indexterm> <indexterm id="io-network-ITERM-3063"
          significance="normal">
          <primary>sizing</primary>

          <secondary>print files</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3064"
          significance="normal">
          <primary>human-readable file size, printing</primary>
        </indexterm>the size of a file in kilobytes, megabytes, or gigabytes.
      Instead of displaying file sizes as 1,073,741,824 bytes, you want an
      approximate, human-readable size, such as 1 GB.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use <literal
      moreinfo="none">FileUtils.byteCountToDisplaySize()</literal> <indexterm
          id="io-network-ITERM-3065" significance="normal">
          <primary>FileUtils.byteCountToDisplaySize( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3066"
          significance="normal">
          <primary>methods</primary>

          <secondary>FileUtils.byteCountToDisplaySize( )</secondary>
        </indexterm> to produce a <literal moreinfo="none">String</literal>
      containing an approximate, human-readable size. The following code
      passes the number of bytes in the file <filename
      moreinfo="none">project.xml</filename> to <literal
      moreinfo="none">FileUtils.byteCountToDisplaySize( )</literal>:</para>

      <programlisting format="linespecific" id="I_10_tt404" language="java">import org.apache.commons.io.FileUtils;

try {
    File file = new File("project.xml");
    long bytes = file.length( );
    String display = FileUtils.byteCountToDisplaySize( bytes );
    System.out.println("File: project.xml");
    System.out.println("  bytes: " + bytes );
    System.out.println("  size: " + display );
} catch( IOException ioe ) {
    System.out.println( "Error reading file length." );
}</programlisting>

      <para>This code prints out the number of bytes in the <filename
      moreinfo="none">project.xml</filename> file, and the human-readable size
      "2 KB":</para>

      <programlisting format="linespecific" id="I_10_tt405">File: project.xml
  bytes: 2132
  size: 2 KB</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para><literal moreinfo="none">FileUtils</literal> contains three static
      variables—<literal moreinfo="none">FileUtils.ONE_KB</literal>, <literal
      moreinfo="none">FileUtils.ONE_MB</literal>, and <literal
      moreinfo="none">FileUtils.ONE_GB</literal>—which represent the number of
      bytes in a kilobyte, megabyte, and gigabyte. <literal
      moreinfo="none">FileUtils.byteCountToDisplaySize( )</literal> divides
      the number of bytes by each constant until it finds a constant that can
      divide the number of bytes, discarding the remainder to create a
      human-readable value. For example, the value 2,123,022 is divided by
      <literal moreinfo="none">FileUtils.ONE_GB</literal>, which returns a
      value of less than 1.0. The value is then divided by <literal
      moreinfo="none">FileUtils.ONE_MB</literal>, which returns 2—the value
      used in the human-readable size "2 MB."</para>

      <warning id="io-network-NOTE-68" role="ora">
        <para><literal moreinfo="none">FileUtils.byteCountToDisplaySize(
        )</literal> will not round the size of a file; a 2.9 MB file will have
        a display size of 2 MB. The byte count is divided by <literal
        moreinfo="none">ONE_KB</literal>, <literal
        moreinfo="none">ONE_MB</literal>, or <literal
        moreinfo="none">ONE_GB</literal>, and the remainder is
        discarded.</para>
      </warning>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-copying-files" label="10.5" role="Recipe">
    <title>Copying Files, Strings, and URLs</title>

    <sect2>
      <title>Problem</title>

      <para>You need to copy a file <indexterm id="io-network-ITERM-3067"
          significance="normal">
          <primary>Commons IO</primary>

          <secondary>copying files</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3068"
          significance="normal">
          <primary>copying</primary>

          <secondary>files</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3069"
          significance="normal">
          <primary>I/O</primary>

          <secondary>Commons IO</secondary>

          <tertiary>copying files</tertiary>
        </indexterm> <indexterm id="io-network-ITERM-3070"
          significance="normal">
          <primary>files</primary>

          <secondary>copying</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3071"
          significance="normal">
          <primary>strings</primary>

          <secondary>copying</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3072"
          significance="normal">
          <primary>URLs (uniform resource locators)</primary>

          <secondary>copying</secondary>
        </indexterm>to another file, or you need to copy a <indexterm
          id="io-network-ITERM-3073" significance="normal">
          <primary>uniform resource locators</primary>

          <see>URLs</see>
        </indexterm>file to a directory.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use <literal moreinfo="none">FileUtils.copyFile()</literal>
      <indexterm id="io-network-ITERM-3074" significance="normal">
          <primary>FileUtils.copyFile( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3075"
          significance="normal">
          <primary>methods</primary>

          <secondary>FileUtils.copyFile( )</secondary>
        </indexterm> and <literal
      moreinfo="none">FileUtils.copyFileToDirectory()</literal> <indexterm
          id="io-network-ITERM-3076" significance="normal">
          <primary>FileUtils.copyFileToDirectory( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3077"
          significance="normal">
          <primary>methods</primary>

          <secondary>FileUtils.copyFileToDirectory( )</secondary>
        </indexterm>. The following code copies the file <filename
      moreinfo="none">test.dat</filename> to <filename
      moreinfo="none">test.dat.bak</filename>:</para>

      <programlisting format="linespecific" id="I_10_tt406" language="java">import org.apache.commons.io.FileUtils;

try {
    File src = new File( "test.dat" );
    file dest = new File( "test.dat.bak" );
            
    FileUtils.copyFile( src, dest ) {
} catch( IOException ioe ) {
    System.out.println( "Problem copying file." );
}</programlisting>

      <para>You may also use <literal
      moreinfo="none">FileUtils.copyFileToDirectory( )</literal> to copy a
      file to a directory. The following code copies the file <filename
      moreinfo="none">test.dat</filename> to the directory <filename
      moreinfo="none">./temp</filename>:</para>

      <programlisting format="linespecific" id="I_10_tt407" language="java">try {
    File src = new File( "test.dat" );
    File dir = new File( "./temp" );

    FileUtils.copyFileToDirectory( src, dir );
} catch( IOException ioe ) {
    System.out.println( "Problem copying file to dir.");
}</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>Quite often you need to write the contents of a <literal
      moreinfo="none">String</literal> to a file. <literal
      moreinfo="none">FileUtils.writeStringToFile( )</literal> provides a
      quick way to write textual content stored in a <literal
      moreinfo="none">String</literal> to a <literal
      moreinfo="none">File</literal>, without opening a <literal
      moreinfo="none">Writer</literal>. The following code writes the contents
      of the <literal moreinfo="none">data String</literal> to the file
      <filename moreinfo="none">temp.tmp</filename>:</para>

      <programlisting format="linespecific" id="I_10_tt408" language="java">try {
  String string = "Blah blah blah";
  File dest = new File( "test.tmp" );
            
  FileUtils.writeStringToFile( dest, string, ? );
}</programlisting>

      <para>Another common task is storing the contents of a <literal
      moreinfo="none">URL</literal> in a <literal
      moreinfo="none">File</literal>. <literal
      moreinfo="none">FileUtils.copyURLToFile( )</literal> takes a <literal
      moreinfo="none">URL</literal> object and stores the contents in a file.
      The following code stores the contents of the <emphasis>New York
      Times</emphasis> front page in a file <filename
      moreinfo="none">times.html</filename>:</para>

      <programlisting format="linespecific" id="I_10_tt409" language="java">try {
    URL src = new URL( "http://www.nytimes.com" );
    File dest = new File( "times.html" );

    FileUtils.copyURLToFile( src, dest );
} catch( IOException ioe ) {
    System.out.println( "Error copying contents of a URL to a File." );
}</programlisting>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-delete-recurse" label="10.6" role="Recipe">
    <title>Deleting Directories Recursively</title>

    <sect2>
      <title>Problem</title>

      <para>You need to delete a directory and <indexterm
          id="io-network-ITERM-3078" significance="normal">
          <primary>Commons IO</primary>

          <secondary>deleting directories</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3079"
          significance="normal">
          <primary>deleting</primary>

          <secondary>directories</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3080"
          significance="normal">
          <primary>I/O</primary>

          <secondary>Commons IO</secondary>

          <tertiary>deleting directories</tertiary>
        </indexterm> <indexterm id="io-network-ITERM-3081"
          significance="normal">
          <primary>directories</primary>

          <secondary>deleting</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3082"
          significance="normal">
          <primary>recursive deletes, directories</primary>
        </indexterm>everything it contains. You need a recursive delete—the
      equivalent of a Unix <literal moreinfo="none">rm -r</literal>.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use <literal moreinfo="none">FileUtils.deleteDirectory()</literal>
      <indexterm id="io-network-ITERM-3083" significance="normal">
          <primary>FileUtils.deleteDirectory( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3084"
          significance="normal">
          <primary>methods</primary>

          <secondary>FileUtils.deleteDirectory( )</secondary>
        </indexterm> to remove a directory and everything below it. The
      following example deletes the <filename moreinfo="none">temp</filename>
      directory:</para>

      <programlisting format="linespecific" id="I_10_tt410" language="java">import org.apache.commons.io.FileUtils;

try {
    File dir = new File( "temp" );
    FileUtils.deleteDirectory( dir );
} catch( IOException ioe ) {
    System.out.println( "Error deleting directory." );
}</programlisting>

      <para>This code will delete every file and directory in the <filename
      moreinfo="none">temp</filename> directory and, once the directory is
      empty, <literal moreinfo="none">deleteDirectory( )</literal> will remove
      the <filename moreinfo="none">temp</filename> directory itself.</para>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>You can also "clean" a directory with the <literal
      moreinfo="none">cleanDirectory()</literal> <indexterm
          id="io-network-ITERM-3085" significance="normal">
          <primary>cleanDirectory( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3086"
          significance="normal">
          <primary>methods</primary>

          <secondary>cleanDirectory( )</secondary>
        </indexterm> method. When cleaning a directory, the contents of the
      directory are erased, but the directory itself is not deleted. The
      following example cleans the <filename moreinfo="none">temp</filename>
      directory, emptying it of all files and <indexterm
          id="io-network-ITERM-3087" significance="normal">
          <primary>subdirectories</primary>

          <secondary>cleaning</secondary>
        </indexterm>subdirectories:</para>

      <programlisting format="linespecific" id="I_10_tt411" language="java">import org.apache.commons.io.FileUtils;

try {
    File dir = new File( "temp" );
    FileUtils.cleanDirectory( dir );
} catch( IOException ioe ) {
    System.out.println( "Problem cleaning a directory" );
}</programlisting>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-obtain-size" label="10.7" role="Recipe">
    <title>Obtaining the Size of a Directory</title>

    <sect2>
      <title>Problem</title>

      <para>You need to know the size of <indexterm id="io-network-ITERM-3088"
          significance="normal">
          <primary>Commons IO</primary>

          <secondary>sizing directories</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3089"
          significance="normal">
          <primary>sizing</primary>

          <secondary>directories</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3090"
          significance="normal">
          <primary>I/O</primary>

          <secondary>Commons IO</secondary>

          <tertiary>sizing directories</tertiary>
        </indexterm> <indexterm id="io-network-ITERM-3091"
          significance="normal">
          <primary>directories</primary>

          <secondary>sizing</secondary>
        </indexterm>everything contained within a directory.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use the<indexterm id="io-network-ITERM-3092" significance="normal">
          <primary>FileUtils.sizeOfDirectory( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3093"
          significance="normal">
          <primary>methods</primary>

          <secondary>FileUtils.sizeOfDirectory( )</secondary>
        </indexterm> <literal moreinfo="none">sizeOfDirectory( )</literal>
      method on <literal moreinfo="none">FileUtils</literal>. The following
      example returns the size of the <filename
      moreinfo="none">temp</filename> directory:</para>

      <programlisting format="linespecific" id="I_10_tt412" language="java">File dir = new File( "temp" );
long dirSize = FileUtils.sizeOfDirectory( );</programlisting>

      <para>If <filename moreinfo="none">temp</filename> contains a number
      files, <literal moreinfo="none">FileUtils.sizeOfDirectory( )</literal>
      will return the sum of the size of every file in <filename
      moreinfo="none">temp</filename>. If <filename
      moreinfo="none">temp</filename> contains subdirectories, this method
      will recursively call <literal moreinfo="none">sizeOfDirectory(
      )</literal> on each subdirectory to obtain the size of each
      subdirectory, and it will return the sum of these sizes.</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-touching-file" label="10.8" role="Recipe">
    <title>Touching a File</title>

    <sect2>
      <title>Problem</title>

      <para>You need to perform the <indexterm id="io-network-ITERM-3094"
          significance="normal">
          <primary>Commons IO</primary>

          <secondary>timestamps</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3095"
          significance="normal">
          <primary>timestamps</primary>

          <secondary>Commons IO</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3096"
          significance="normal">
          <primary>I/O</primary>

          <secondary>Commons IO</secondary>

          <tertiary>timestamps</tertiary>
        </indexterm> <indexterm id="io-network-ITERM-3097"
          significance="normal">
          <primary>updating timestamps</primary>
        </indexterm> <indexterm id="io-network-ITERM-3098"
          significance="normal">
          <primary>timestamps</primary>

          <secondary>updating</secondary>
        </indexterm>equivalent of the Unix <literal
      moreinfo="none">touch</literal> command; you want to create a file or
      update a file's modified timestamp.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use the <literal moreinfo="none">touch()</literal> <indexterm
          id="io-network-ITERM-3099" significance="normal">
          <primary>FileUtils.touch( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3100"
          significance="normal">
          <primary>methods</primary>

          <secondary>FileUtils.touch( )</secondary>
        </indexterm> method from <literal moreinfo="none">FileUtils</literal>.
      To use <literal moreinfo="none">touch( )</literal>, pass it a <literal
      moreinfo="none">File</literal> object; if the <literal
      moreinfo="none">File</literal> does not exist, <literal
      moreinfo="none">touch( )</literal> will create a new file. If the file
      exists, the timestamp of the file will be updated to the current time.
      The following code demonstrates the <literal moreinfo="none">touch(
      )</literal> method on the file <filename
      moreinfo="none">testFile.txt</filename>:</para>

      <programlisting format="linespecific" id="I_10_tt413" language="java">import org.apache.commons.io.FileUtils;

try {
    File testFile = new File( "testFile.txt" );

    // If testFile didn't already exists, create it
    // If testFile already exists, update the modified timestamp
    FileUtils.touch( testFile );  
} catch( IOException ioe ) {
    System.out.println( "Error touching testFile" );
}</programlisting>

      <para>If <filename moreinfo="none">testFile.txt</filename> does not
      exist, the file will be created by the call to <literal
      moreinfo="none">touch( )</literal>. If <filename
      moreinfo="none">testFile.txt</filename> does exist, the last modified
      timestamp will be updated to the current time after the call to <literal
      moreinfo="none">touch( )</literal>.</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-filtering-files" label="10.9" role="Recipe">
    <title>Filtering Files</title>

    <sect2>
      <title>Problem</title>

      <para>You need to select all the files<indexterm
          id="io-network-ITERM-3101" significance="normal">
          <primary>Commons IO</primary>

          <secondary>filtering files</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3102"
          significance="normal">
          <primary>filtering</primary>

          <secondary>files</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3103"
          significance="normal">
          <primary>I/O</primary>

          <secondary>Commons IO</secondary>

          <tertiary>filtering files</tertiary>
        </indexterm> <indexterm id="io-network-ITERM-3104"
          significance="normal">
          <primary>files</primary>

          <secondary>filtering</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3105"
          significance="normal">
          <primary>directories</primary>

          <secondary>filtering</secondary>
        </indexterm> in a directory ending in <filename
      moreinfo="none">.xml</filename>, or you need to select only files (not
      subdirectories) contained in a directory. In other words, you need to
      filter a list of files.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use one of the many implementations of <literal
      moreinfo="none">IOFileFilter</literal> <indexterm
          id="io-network-ITERM-3106" significance="normal">
          <primary>IOFileFilter</primary>
        </indexterm> in the <literal
      moreinfo="none">org.apache.commons.io.filefilter</literal> package. This
      package contains various implementations of <literal
      moreinfo="none">FileFilter</literal> and <literal
      moreinfo="none">FilenameFilter</literal>, which can be used to filter
      the contents of a directory. The following example uses <literal
      moreinfo="none">SuffixFileFilter</literal> to return an array of
      filenames that end in <filename moreinfo="none">.xml</filename>:</para>

      <programlisting format="linespecific" id="I_10_tt414" language="java">import java.io.FilenameFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.lang.ArrayUtils;

File rootDir = new File(".");
FilenameFilter fileFilter = new SuffixFileFilter(".xml");
String[] xmlFiles = rootDir.list( fileFilter );
System.out.println( "*** XML Files" );
System.out.println( ArrayUtils.toString( xmlFiles ) );</programlisting>

      <para>This code searches for all files ending in <filename
      moreinfo="none">.xml</filename> in the current directory. Running this
      in the root of the example project matches one file, <filename
      moreinfo="none">project.xml</filename>, producing the following
      output:</para>

      <programlisting format="linespecific" id="I_10_tt415">*** XML Files
{project.xml}</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>The <literal
      moreinfo="none">org.apache.commons.io.filefilter</literal> <indexterm
          id="io-network-ITERM-3107" significance="normal">
          <primary>org.apache.commons.io.filefilter package</primary>
        </indexterm> package contains a number of implementations of <literal
      moreinfo="none">FilenameFilter</literal> and <literal
      moreinfo="none">FileFilter</literal>. <literal
      moreinfo="none">PrefixFileFilter</literal> and <literal
      moreinfo="none">SuffixFileFilter</literal> let you match files and
      directories by a prefix or suffix. <literal
      moreinfo="none">NameFileFilter</literal> matches a file or a directory
      to a specific name. <literal
      moreinfo="none">DirectoryFileFilter</literal> accepts only directories.
      <literal moreinfo="none">AndFileFilter</literal>, <literal
      moreinfo="none">OrFileFilter</literal>, and <literal
      moreinfo="none">NotFileFilter</literal> allow for the logical
      combination of filters. The following example uses a combination of the
      file filters in this package to list <filename
      moreinfo="none">.htm</filename> or <filename
      moreinfo="none">.html</filename> files in a directory:</para>

      <programlisting format="linespecific" id="I_10_tt416" language="java">import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.DirectoryFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.OrFileFilter;
import org.apache.commons.io.filefilter.SuffixFileFilter;
import org.apache.commons.lang.ArrayUtils;

IOFileFilter htmlFilter = 
    new OrFileFilter( new SuffixFileFilter("htm"),
                      new SuffixFileFilter("html") );
IOFileFilter notDirectory = new NotFileFilter( DirectoryFileFilter.INSTANCE );
FilenameFilter fileFilter = new AndFileFilter( htmlFilter, notDirectory );

String[] htmlFiles = rootDir.list(fileFilter);
System.out.println( "*** HTML Files" );
System.out.println( ArrayUtils.toString( htmlFiles ) );</programlisting>

      <para>This example combines two <literal
      moreinfo="none">SuffixFileFilter</literal> <indexterm
          id="io-network-ITERM-3108" significance="normal">
          <primary>SuffixFileFilter instances</primary>
        </indexterm> <indexterm id="io-network-ITERM-3109"
          significance="normal">
          <primary>instances</primary>

          <secondary>SuffixFileFilter</secondary>
        </indexterm> instances in an <literal
      moreinfo="none">OrFileFilter</literal> to match <filename
      moreinfo="none">.htm</filename> or <filename
      moreinfo="none">.html</filename> files. Wrapping a <literal
      moreinfo="none">DirectoryFileFilter</literal> with a <literal
      moreinfo="none">NotFileFilter</literal> creates a filter that will
      accept files and reject directories. Combining these two filters in an
      <literal moreinfo="none">AndFileFilter</literal> creates a filter to
      list files with either suffix. Every filter defined in the <literal
      moreinfo="none">org.apache.commons.io.filefilter</literal> package is an
      implementation of the <literal moreinfo="none">IOFileFilter</literal>,
      which implements both the <literal
      moreinfo="none">java.io.FileFilter</literal> and <literal
      moreinfo="none">java.io.FilenameFilter</literal> interfaces.</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-measuring-stream-traffic" label="10.10"
         role="Recipe">
    <title>Measuring Stream Traffic</title>

    <sect2>
      <title>Problem</title>

      <para>You need to keep track <indexterm id="io-network-ITERM-3110"
          significance="normal">
          <primary>Commons IO</primary>

          <secondary>tracking traffic</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3111"
          significance="normal">
          <primary>tracking</primary>
        </indexterm> <indexterm id="io-network-ITERM-3112"
          significance="normal">
          <primary>traffic</primary>

          <secondary>Commons IO</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3113"
          significance="normal">
          <primary>I/O</primary>

          <secondary>Commons IO</secondary>

          <tertiary>tracking traffic</tertiary>
        </indexterm> <indexterm id="io-network-ITERM-3114"
          significance="normal">
          <primary>traffic</primary>

          <secondary>tracking</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3115"
          significance="normal">
          <primary>streams</primary>

          <secondary>tracking</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3116"
          significance="normal">
          <primary>measuring</primary>

          <secondary>stream traffic</secondary>
        </indexterm>of the number of bytes read from an <literal
      moreinfo="none">InputStream</literal> or written to an <literal
      moreinfo="none">OutputStream</literal>.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use a <literal moreinfo="none">CountingInputStream</literal>
      <indexterm id="io-network-ITERM-3117" significance="normal">
          <primary>CountingInputStream</primary>
        </indexterm> or <literal
      moreinfo="none">CountingOutputStream</literal> <indexterm
          id="io-network-ITERM-3118" significance="normal">
          <primary>CountingOutputStream</primary>
        </indexterm> to keep track of the number of bytes written to a stream.
      The following example uses a <literal
      moreinfo="none">CountingOutputStream</literal> to keep track of the
      number of bytes written to a <literal
      moreinfo="none">FileOutputStream</literal> <indexterm
          id="io-network-ITERM-3119" significance="normal">
          <primary>FileOutputStream</primary>
        </indexterm>:</para>

      <programlisting format="linespecific" id="I_10_tt417" language="java">import org.apache.commons.io.IOUtils;
import org.apache.commons.io.output.CountingOutputStream;
import java.io.*;

File test = new File( "test.dat" );
CountingOutputStream countStream = null;

try {
    FileOutputStream fos = new FileOutputStream( test );
    countStream = new CountingOutputStream( fos );
    countStream.write( "Hello".getBytes( ) );
} catch( IOException ioe ) {
    System.out.println( "Error writing bytes to file." );
} finally {
    IOUtils.closeQuietly( countStream );
}

if( countStream != null ) {
    int bytesWritten = countStream.getCount( );
    System.out.println( "Wrote " + bytesWritten + " bytes to test.dat" );
}</programlisting>

      <para>This previous example wrapped a <literal
      moreinfo="none">FileOutputStream</literal> with a <literal
      moreinfo="none">CountingOutputStream</literal>, producing the following
      console output:</para>

      <programlisting format="linespecific" id="I_10_tt418">Wrote 5 bytes to test.dat</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para><literal moreinfo="none">CountingInputStream</literal> wraps an
      <literal moreinfo="none">InputStream</literal> and <literal
      moreinfo="none">getCount( )</literal> provides a running tally of total
      bytes read. The following example demonstrates <literal
      moreinfo="none">CountingInputStream</literal>:</para>

      <programlisting format="linespecific" id="I_10_tt419" language="java">import org.apache.commons.io.IOUtils;
import org.apache.commons.io.output.CountingOutputStream;
import java.io.*;

File test = new File( "test.dat" );
CountingInputStream countStream = null;

try {
    FileInputStream fis = new FileInputStream( test );
    countStream = new CountingOutputStream( fis );
    String contents = IOUtils.toString( countStream );
} catch( IOException ioe ) {
    System.out.println( "Error reading bytes from file." );
} finally {
    IOUtils.closeQuietly( countStream );
}

if( countStream != null ) {
    int bytesRead = countStream.getCount( );
    System.out.println( "Read " + bytesRead + " bytes from test.dat" );
}</programlisting>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-splitting-output" label="10.11" role="Recipe">
    <title>Splitting an OutputStream</title>

    <sect2>
      <title>Problem</title>

      <para>You need to send the same output <indexterm
          id="io-network-ITERM-3120" significance="normal">
          <primary>Commons IO</primary>

          <secondary>splitting OutputStreams</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3121"
          significance="normal">
          <primary>splitting</primary>

          <secondary>OutputStreamsCommons IO</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3122"
          significance="normal">
          <primary>I/O</primary>

          <secondary>Commons IO</secondary>

          <tertiary>splitting OutputSteams</tertiary>
        </indexterm> <indexterm id="io-network-ITERM-3123"
          significance="normal">
          <primary>OutputStreams, splitting</primary>
        </indexterm>to two <literal
      moreinfo="none">OutputStream</literal>s.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use <indexterm id="io-network-ITERM-3124" significance="normal">
          <primary>Commons IO TeeOutputStream</primary>
        </indexterm>Commons IO <literal
      moreinfo="none">TeeOutputStream</literal> to send the same data to two
      instances of <literal moreinfo="none">OutputStream</literal>. When data
      is written to a <literal moreinfo="none">TeeOutputStream</literal>
      <indexterm id="io-network-ITERM-3125" significance="normal">
          <primary>TeeOutputStream</primary>
        </indexterm>, that data is sent to the two instances of <literal
      moreinfo="none">OutputStream</literal> passed to its constructor. The
      following example demonstrates the use of <literal
      moreinfo="none">TeeOutputStream</literal> to write the same <literal
      moreinfo="none">String</literal> to two instances of <literal
      moreinfo="none">FileOutputStream</literal> <indexterm
          id="io-network-ITERM-3126" significance="normal">
          <primary>FileOutputStream</primary>
        </indexterm> <indexterm id="io-network-ITERM-3127"
          significance="normal">
          <primary>instances</primary>

          <secondary>FileOutputStream</secondary>
        </indexterm>:</para>

      <programlisting format="linespecific" id="I_10_tt420" language="java">import org.apache.commons.io.IOUtils;
import org.apache.commons.io.output.TeeOutputStream;

File test1 = new File("split1.txt");
File test2 = new File("split2.txt");
OutputStream outStream = null;
        
try {
    FileOutputStream fos1 = new FileOutputStream( test1 );
    FileOutputStream fos2 = new FileOutputStream( test2 );
    outStream = new TeeOutputStream( fos1, fos2 );
            
    outStream.write( "One Two Three, Test".getBytes( ) );
    outStream.flush( );
} catch( IOException ioe ) {
    System.out.println( "Error writing to split output stream" );
} finally {
    IOUtils.closeQuietly( outStream );
}</programlisting>

      <para>Flushing or closing a <literal
      moreinfo="none">TeeOutputStream</literal> will flush or close both of
      the <literal moreinfo="none">OutputStream</literal> instances it
      contains. After this example is executed, two files, <filename
      moreinfo="none">split1.txt</filename> and <filename
      moreinfo="none">split2.txt</filename>, will contain the same
      text.</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-obtaining-oro" label="10.12" role="Recipe">
    <title>Obtaining Jakarta ORO</title>

    <sect2>
      <title>Problem</title>

      <para>You need to use <indexterm id="io-network-ITERM-3128"
          significance="normal">
          <primary>Jakarta ORO</primary>

          <secondary>downloading</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3129"
          significance="normal">
          <primary>downloading</primary>

          <secondary>Jakarta ORO</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3130"
          significance="normal">
          <primary>files</primary>

          <secondary>Jakarta ORO</secondary>

          <tertiary>downloading</tertiary>
        </indexterm> <indexterm id="io-network-ITERM-3131"
          significance="normal">
          <primary>searching</primary>

          <secondary>Jakarta ORO</secondary>

          <tertiary>downloading</tertiary>
        </indexterm>Jakarta ORO to finds files by<indexterm
          id="io-network-ITERM-3132" significance="normal">
          <primary>ORO</primary>

          <see>Jakarta ORO</see>
        </indexterm> a glob or regular expression.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>To use Jakarta ORO in a Maven 2 project, add the following
      dependency to your project's <filename>pom.xml</filename>:</para>

      <example id="io-network-ex-add-depend-oro">
        <title>Adding a Dependency on Commons ORO</title>

        <programlisting language="xml">    &lt;dependency&gt;
      &lt;groupId&gt;oro&lt;/groupId&gt;
      &lt;artifactId&gt;oro&lt;/artifactId&gt;
      &lt;version&gt;2.0.8&lt;/version&gt;
    &lt;/dependency&gt;
</programlisting>
      </example>

      <para>If you are not sure what this means, I'd suggest reading <ulink
      url="http://www.sonatype.com/books/maven-book">Maven: The Complete
      Reference</ulink>. When you depend on a library in Maven 2, all you need
      to do is add the dependency <varname>groupId</varname>,
      <varname>artifactId</varname>, and <varname>version</varname> to your
      project's dependencies. Once you do this, Maven 2 will download the
      dependency and make it available on your project's classpath.</para>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>Jakarta ORO provides support for Perl regular expressions, AWK
      expressions, and glob expressions. Before Java 1.4 introduced the
      <literal moreinfo="none">java.util.regex</literal> package and regular
      expression support in the <literal moreinfo="none">String</literal>
      class, Jakarta ORO and Jakarta RegExp gave developers a way to use
      regular expressions in Java. Now that Java supports regular expressions,
      ORO still remains relevant for developers who need specific support for
      Perl5 extended regular expressions.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For more information about ORO, see the Jakarta ORO project at
      <ulink
      url="http://jakarta.apache.org/oro">http://jakarta.apache.org/oro</ulink>.
      For more information about the regular expression syntax supported by
      Jakarta ORO, see the package summary for the <literal
      moreinfo="none">org.apache.oro.test.regex</literal> package at <ulink
      url="http://jakarta.apache.org/oro/api/org/apache/oro/text/regex/package-summary.html">http://jakarta.apache.org/oro/api/org/apache/oro/text/regex/package-summary.html</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-globs-perl5" label="10.13" role="Recipe">
    <title>Using Globs and Perl5 Regular Expressions to List Files</title>

    <sect2>
      <title>Problem</title>

      <para>You need to get a list<indexterm id="io-network-ITERM-3133"
          significance="normal">
          <primary>Jakarta ORO</primary>

          <secondary>listing files</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3134"
          significance="normal">
          <primary>lists</primary>

          <secondary>files</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3135"
          significance="normal">
          <primary>files</primary>

          <secondary>Jakarta ORO</secondary>

          <tertiary>listing</tertiary>
        </indexterm> <indexterm id="io-network-ITERM-3136"
          significance="normal">
          <primary>searching</primary>

          <secondary>Jakarta ORO</secondary>

          <tertiary>listing files</tertiary>
        </indexterm> <indexterm id="io-network-ITERM-3137"
          significance="normal">
          <primary>globs</primary>
        </indexterm> <indexterm id="io-network-ITERM-3138"
          significance="normal">
          <primary>expressions</primary>

          <secondary>files, listing</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3139"
          significance="normal">
          <primary>regular expressions</primary>
        </indexterm> of files that match either a glob or regular
      expression.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use <literal moreinfo="none">Perl5FilenameFilter</literal>
      <indexterm id="io-network-ITERM-3140" significance="normal">
          <primary>Perl5FilenameFilter</primary>
        </indexterm> or <literal moreinfo="none">GlobFilenameFilter</literal>
      <indexterm id="io-network-ITERM-3141" significance="normal">
          <primary>GlobFilenameFilter</primary>
        </indexterm> from Jakarta ORO to select all files matching an
      expression. Both of these classes implement the <literal
      moreinfo="none">FileFilter</literal> and <literal
      moreinfo="none">FilenameFilter</literal> interface, and both can be
      passed to the <literal moreinfo="none">listFiles( )</literal> method on
      a <literal moreinfo="none">File</literal> object. The following example
      uses <literal moreinfo="none">GlobFilenameFilter</literal> to list XML
      files in the <filename moreinfo="none">./dataDir</filename>
      directory:</para>

      <programlisting format="linespecific" id="I_10_tt422" language="java">import org.apache.oro.io.GlobFilenameFilter;

File dataDir = <userinput moreinfo="none">new</userinput> File("./dataDir");
FilenameFilter xmlFilter = <userinput moreinfo="none">new</userinput> GlobFilenameFilter( "*.xml" );
File[] xmlFiles = dataDir.listFiles( xmlFilter );</programlisting>

      <para>To find all files matching a Perl regular expression, use the
      <literal moreinfo="none">Perl5FilenameFilter</literal>. The following
      example returns files starting with "dev" and ending with ".tld" by
      passing a regular expression to the constructor of <literal
      moreinfo="none">Perl5FilenameFilter</literal>:</para>

      <programlisting format="linespecific" id="I_10_tt423" language="java">File dataDir = <userinput
          moreinfo="none">new</userinput> File("./dataDir");
FilenameFilter regexFilter = <userinput moreinfo="none">new</userinput> Perl5FilenameFilter( "^dev.*.tld$" );
File[] tldFiles = dataDir.listFiles( regexFilter );</programlisting>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-obtaining-net" label="10.14" role="Recipe">
    <title>Obtaining Commons Net</title>

    <sect2>
      <title>Problem</title>

      <para>You need to use <indexterm id="io-network-ITERM-3142"
          significance="normal">
          <primary>Commons Net</primary>

          <secondary>downloading</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3143"
          significance="normal">
          <primary>downloading</primary>

          <secondary>Commons Net</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3144"
          significance="normal">
          <primary>clients</primary>

          <secondary>Commons Net</secondary>

          <tertiary>downloading</tertiary>
        </indexterm>Commons Net to write a simple FTP, SMTP, or POP3
      client.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>To use Commons Net in a Maven 2 project, add the following
      dependency to your project's <filename>pom.xml</filename>:</para>

      <example id="io-network-ex-add-depend-net">
        <title>Adding a Dependency on Commons Net</title>

        <programlisting language="xml">    &lt;dependency&gt;
        &lt;groupId&gt;commons-net&lt;/groupId&gt;
        &lt;artifactId&gt;commons-net&lt;/artifactId&gt;
        &lt;version&gt;2.2&lt;/version&gt;
    &lt;/dependency&gt;
</programlisting>
      </example>

      <para>If you are not sure what this means, I'd suggest reading <ulink
      url="http://www.sonatype.com/books/maven-book">Maven: The Complete
      Reference</ulink>. When you depend on a library in Maven 2, all you need
      to do is add the dependency <varname>groupId</varname>,
      <varname>artifactId</varname>, and <varname>version</varname> to your
      project's dependencies. Once you do this, Maven 2 will download the
      dependency and make it available on your project's classpath.</para>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>Commons Net contains some simple clients for commonly used network
      protocols, such as FTP, TFTP, Telnet, NNTP, POP3, and SMTP. Protocols
      are supported by collections of classes in packages dedicated to these
      protocols. For example, FTP is supported by a set of classes in the
      <literal moreinfo="none">org.apache.commons.net.ftp</literal> package,
      including <literal moreinfo="none">FTPClient</literal> and <literal
      moreinfo="none">FTPFile</literal>; and SMTP is supported by classes in
      the <literal moreinfo="none">org.apache.commons.net.smtp</literal>
      package, including <literal moreinfo="none">SMTPClient</literal>.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For more information about Commons Net, see the Commons Net
      project page at <ulink
      url="http://commons.apache.org/net">http://commons.apache.org/net</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-writing-ftp" label="10.15" role="Recipe">
    <title>Writing an FTP Client</title>

    <sect2>
      <title>Problem</title>

      <para>You need to write a<indexterm id="io-network-ITERM-3145"
          significance="normal">
          <primary>File Transfer Protocol</primary>

          <see>FTP</see>
        </indexterm> program to interact<indexterm class="startofrange"
          id="io-network-ITERM-3146" significance="normal">
          <primary>Commons Net</primary>

          <secondary>FTP</secondary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3147" significance="normal">
          <primary>FTP (File Transfer Protocol)</primary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3148" significance="normal">
          <primary>clients</primary>

          <secondary>Commons Net</secondary>

          <tertiary>FTP</tertiary>
        </indexterm> with an FTP server.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use Commons Net <literal moreinfo="none">FTPClient</literal> to
      communicate <indexterm id="io-network-ITERM-3149" significance="normal">
          <primary>servers</primary>

          <secondary>FTP</secondary>
        </indexterm>with an FTP server. The following example retrieves the
      contents of the file <filename moreinfo="none">c64bus.gif</filename>
      from <filename moreinfo="none">ftp.ibibilio.org</filename>:</para>

      <programlisting format="linespecific" id="I_10_tt425" language="java">import org.apache.commons.io.IOUtils;
import org.apache.commons.net.ftp.FTPClient;

FTPClient client = new FTPClient( );
OutputStream outStream = null;

try {
    // Connect to the FTP server as anonymous
    client.connect( "ftp.ibiblio.org" );
    client.login( "anonymous", "" );

    String remoteFile = "/pub/micro/commodore/schematics/computers/c64/
                         c64bus.gif";

    // Write the contents of the remote file to a FileOutputStream
    outStream = new FileOutputStream( "c64bus.gif" );
    client.retrieveFile( remoteFile, outStream );
} catch(IOException ioe) {
    System.out.println( "Error communicating with FTP server." );
} finally {
    IOUtils.closeQuietly( outStream );
    try {
        client.disconnect( );
    } catch (IOException e) {
        System.out.println( "Problem disconnecting from FTP server" );
    }
}</programlisting>

      <para>In the previous example, an instance of <literal
      moreinfo="none">FTPClient</literal> is created; the example then logs on
      to <filename moreinfo="none">ftp.ibibio.org</filename> as <filename
      moreinfo="none">anonymous—</filename>with no password—using the <literal
      moreinfo="none">connect( )</literal> <indexterm
          id="io-network-ITERM-3150" significance="normal">
          <primary>connect( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3151"
          significance="normal">
          <primary>methods</primary>

          <secondary>connect( )</secondary>
        </indexterm> and <literal moreinfo="none">login()</literal> <indexterm
          id="io-network-ITERM-3152" significance="normal">
          <primary>login( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3153"
          significance="normal">
          <primary>methods</primary>

          <secondary>login( )</secondary>
        </indexterm> method on <literal moreinfo="none">FTPClient</literal>.
      The full path to the remote file <filename
      moreinfo="none">c64bus.gif</filename> and an <literal
      moreinfo="none">OutputStream</literal> are passed to <literal
      moreinfo="none">retrieveFile()</literal> <indexterm
          id="io-network-ITERM-3154" significance="normal">
          <primary>retrieveFile( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3155"
          significance="normal">
          <primary>methods</primary>

          <secondary>retrieveFile( )</secondary>
        </indexterm>, which then transfers the contents of the <filename
      moreinfo="none">c64bus.gif</filename> to a local file. Once the file has
      been retrieved, the <literal moreinfo="none">FTPClient</literal> is
      disconnected from the server using the <literal
      moreinfo="none">disconnect( )</literal> <indexterm
          id="io-network-ITERM-3156" significance="normal">
          <primary>disconnect( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3157"
          significance="normal">
          <primary>methods</primary>

          <secondary>disconnect( )</secondary>
        </indexterm> method in a <literal moreinfo="none">finally</literal>
      block.</para>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para><literal moreinfo="none">FTPClient</literal> can also be used to
      list the contents of a directory by passing a directory to the <literal
      moreinfo="none">listFiles( )</literal> method. The following example
      uses <literal moreinfo="none">FTPClient</literal> to print the name and
      size of every file in the <filename
      moreinfo="none">/pub/mirrors/apache/jakarta/ecs/binaries</filename>
      directory on <filename
      moreinfo="none">ftp.ibiblio.org</filename>:</para>

      <programlisting format="linespecific" id="I_10_tt426" language="java">import org.apache.commons.net.ftp.FTPClient;
import org.apache.commons.net.ftp.FTPFile;

FTPClient client = new FTPClient( );

// Connect to the FTP server as anonymous
client.connect( "ftp.ibiblio.org" );
client.login( "anonymous", "" );

String remoteDir = "/pub/mirrors/apache/jakarta/ecs/binaries";

// List the contents of the remote directory
FTPFile[] remoteFiles = client.listFiles( remoteDir );

System.out.println( "Files in " + remoteDir );
for (int i = 0; i &lt; remoteFiles.length; i++) {
    String name = remoteFiles[i].getName( );
    long length = remoteFiles[i].getSize( );
    String readableLength = FileUtils.byteCountToDisplaySize( length );

    System.out.println( name + ":\t\t" + readableLength );
}
client.disconnect( );</programlisting>

      <para>After connecting to <filename
      moreinfo="none">ftp.ibiblio.org</filename>, this example retrieves an
      array of <literal moreinfo="none">FTPFile</literal> objects using
      <literal moreinfo="none">client.listFiles( )</literal>. Each <literal
      moreinfo="none">FTPFile</literal> object contains information describing
      the remote file, and the name and size of each <literal
      moreinfo="none">FTPFile</literal> is printed to the console as
      follows:</para>

      <programlisting format="linespecific" id="I_10_tt427">Files in /pub/mirrors/apache/jakarta/ecs/binaries
README.html:           1 KB
RELEASE_NOTES.txt:     2 KB
ecs-1.4.2.tar.gz:      1 MB
ecs-1.4.2.tar.gz.asc:  65 bytes
ecs-1.4.2.tar.gz.md5:  33 bytes
ecs-1.4.2.zip:         2 MB
ecs-1.4.2.zip.asc:     65 bytes
ecs-1.4.2.zip.md5:     33 bytes</programlisting>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>Commons Net also contains a <indexterm id="io-network-ITERM-3158"
          significance="normal">
          <primary>Trivial File Transfer Protocol</primary>

          <see>TFTP</see>
        </indexterm>Trivial File Transfer Protocol <indexterm
          id="io-network-ITERM-3159" significance="normal">
          <primary>clients</primary>

          <secondary>TFTP</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3160"
          significance="normal">
          <primary>TFTP (Trivial File Transfer Protocol)</primary>
        </indexterm>(TFTP) client: <literal
      moreinfo="none">org.apache.commons.net.tftp.TFTPClient</literal>. For
      more information about TFTP client, see the Javadoc for <literal
      moreinfo="none">TFTPClient</literal> at <ulink
      url="http://jakarta.apache.org/commons/net/apidocs/org/apache/commons/net/tftp/TFTPClient.html">http://commons.apache.org/net/apidocs/org/apache/commons/net/tftp/TFTPClient.html</ulink>.</para>

      <para><literal moreinfo="none">FTPClient</literal> contains a number of
      additional<indexterm class="endofrange" id="io-network-ITERM-3161"
      significance="normal" startref="io-network-ITERM-3146"></indexterm>
      <indexterm class="endofrange" id="io-network-ITERM-3162"
      significance="normal" startref="io-network-ITERM-3147"></indexterm>
      <indexterm class="endofrange" id="io-network-ITERM-3163"
      significance="normal" startref="io-network-ITERM-3148"></indexterm>
      features, such as active and passive connection modes and the ability to
      append to remote files, make remote directories, and put files on a
      remote FTP server. For more information about <literal
      moreinfo="none">FTPClient</literal>, see the <literal
      moreinfo="none">FTPClient</literal> Javadoc at <ulink
      url="http://jakarta.apache.org/commons/net/apidocs/org/apache/commons/net/ftp/FTPClient.html">http://commons.apache.org/net/apidocs/org/apache/commons/net/ftp/FTPClient.html</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-sending-mail" label="10.16" role="Recipe">
    <title>Sending Mail with SMTP</title>

    <sect2>
      <title>Problem</title>

      <para>You need to <indexterm id="io-network-ITERM-3164"
          significance="normal">
          <primary>Simple Mail Transfer Protocol</primary>

          <see>SMTP</see>
        </indexterm>send an<indexterm class="startofrange"
          id="io-network-ITERM-3165" significance="normal">
          <primary>Commons Net</primary>

          <secondary>SMTP</secondary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3166" significance="normal">
          <primary>SMTP (Simple Mail Transfer Protocol)</primary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3167" significance="normal">
          <primary>sending</primary>

          <secondary>email</secondary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3168" significance="normal">
          <primary>email</primary>

          <secondary>sending</secondary>
        </indexterm> <indexterm class="startofrange"
          id="io-network-ITERM-3169" significance="normal">
          <primary>clients</primary>

          <secondary>SMTP</secondary>
        </indexterm> email.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use <literal moreinfo="none">SMTPClient</literal> from Commons
      Net. The following example sends a simple email to <filename
      moreinfo="none">somedude@aol.org</filename> from <filename
      moreinfo="none">tobrien@discursive.com</filename> via the SMTP server on
      host <filename moreinfo="none">www.discursive.com</filename> using port
      25:</para>

      <programlisting format="linespecific" id="I_10_tt428" language="java">import org.apache.commons.net.smtp.SMTPClient;

SMTPClient client = new SMTPClient( );
client.connect("www.discursive.com");
client.sendSimpleMessage("tobrien@discursive.com", 
                         "somedude@aol.com", 
                         "Hey! Call me when you get a chance." );
client.disconnect( );</programlisting>

      <para>This example sends a very simple email message to one recipient by
      passing three arguments to <literal
      moreinfo="none">client.sendSimpleMessage()</literal> <indexterm
          id="io-network-ITERM-3170" significance="normal">
          <primary>client.sendSimpleMessage( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3171"
          significance="normal">
          <primary>methods</primary>

          <secondary>client.sendSimpleMessage( )</secondary>
        </indexterm>: the sender's email address, the recipient's email
      address, and a message. If you are trying to send a simple email message
      to multiple recipients, pass a <literal
      moreinfo="none">String[]</literal> containing each address as the second
      parameter to <literal moreinfo="none">sendSimpleMessage( )</literal>.
      The following example sends a simple email message to multiple
      recipients by passing a <literal moreinfo="none">String[]</literal> to
      <literal moreinfo="none">sendSimpleMessage( )</literal>:</para>

      <programlisting format="linespecific" id="I_10_tt429" language="java">import org.apache.commons.net.smtp.SMTPClient;

SMTPClient client = new SMTPClient( );
client.connect("www.discursive.com");

String[] recipients = new String[2];
recipients[0] = "mission-control@nasa.gov";
recipients[1] = "announce@nasa.gov";

client.sendSimpleMessage("astronaut@nasa.gov", 
                         recipients, 
                         "The eagle has landed." );
client.disconnect( );</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para><indexterm id="io-network-ITERM-3172" significance="normal">
          <primary>Telnet</primary>
        </indexterm>Telnet to port 25 of a SMTP server, <indexterm
          id="io-network-ITERM-3173" significance="normal">
          <primary>servers</primary>

          <secondary>SMTP</secondary>
        </indexterm>and you will see the server respond with a numeric code
      (220). <literal moreinfo="none">SMTPReply.isPositiveCompletion(
      )</literal> returns <literal moreinfo="none">true</literal> if the
      response code of the previously executed command is between 200 and 299;
      the value of the initial response code, 220, is equal to the public
      static variable <literal
      moreinfo="none">SMTPReply.SERVICE_READY</literal>. The following example
      uses <literal moreinfo="none">getReplyCode( )</literal> <indexterm
          id="io-network-ITERM-3174" significance="normal">
          <primary>getReplyCode( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3175"
          significance="normal">
          <primary>methods</primary>

          <secondary>getReplyCode( )</secondary>
        </indexterm> and <literal
      moreinfo="none">SMTPReply.isPositiveCompletion()</literal> <indexterm
          id="io-network-ITERM-3176" significance="normal">
          <primary>SMTPReply.isPositiveCompletion( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3177"
          significance="normal">
          <primary>methods</primary>

          <secondary>SMTPReply.isPositiveCompletion( )</secondary>
        </indexterm> to test the connection to<indexterm
          id="io-network-ITERM-3178" significance="normal">
          <primary>connections</primary>

          <secondary>testing</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3179"
          significance="normal">
          <primary>testing</primary>

          <secondary>connections</secondary>
        </indexterm> the SMTP server:</para>

      <programlisting format="linespecific" id="I_10_tt430" language="java">import org.apache.commons.net.smtp.SMTP;
import org.apache.commons.net.smtp.SMTPClient;
import org.apache.commons.net.smtp.SMTPReply;

SMTPClient client = new SMTPClient( );
client.connect("www.discursive.com");

int response = client.getReplyCode( );
if( SMTPReply.isPositiveCompletion( response ) ) {

    // Set the sender and the recipients
    client.setSender( "tobrien@discursive.com" );
    client.addRecipient( "president@whitehouse.gov" );
    client.addRecipient( "vicepresident@whitehouse.gov" );

    // Supply the message via a Writer
    Writer message = client.sendMessageData( );
    message.write( "Spend more money on energy research.  Thanks." );
    message.close( );

    // Send the message and print a confirmation
    boolean success = client.completePendingCommand( );
    if( success ) {
        System.out.println( "Message sent" );                
    }
} else {
    System.out.println( "Error communicating with SMTP server" );
}
client.disconnect( );</programlisting>

      <para>Instead of <literal moreinfo="none">sendSimpleMessage(
      )</literal>, the previous example sets a sender address and two
      recipient addresses using <literal moreinfo="none">setSender(
      )</literal> and <literal moreinfo="none">addRecipient()</literal>. The
      message body is then written to a <literal
      moreinfo="none">Writer</literal> returned by <literal
      moreinfo="none">sendMessageData()</literal>. When the <literal
      moreinfo="none">Writer</literal> is closed, the message is sent by
      calling <literal moreinfo="none">completePendingCommand()</literal>.
      <literal moreinfo="none">completePendingCommand( )</literal> returns
      <literal moreinfo="none">true</literal> if the message has been queued
      for delivery.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>JavaMail is the set of utilities contained in the <literal
      moreinfo="none">javax.mail</literal> package, and JavaMail is usually
      used in conjunction with the Java Activation Framework (JAF) to send
      email messages using SMTP. Commons Net does not aim to replace the
      JavaMail API, but it does provide a very straightforward alternative for
      sending email messages. For more information about JavaMail,
      see<indexterm class="endofrange" id="io-network-ITERM-3180"
      significance="normal" startref="io-network-ITERM-3165"></indexterm>
      <indexterm class="endofrange" id="io-network-ITERM-3181"
      significance="normal" startref="io-network-ITERM-3166"></indexterm>
      <indexterm class="endofrange" id="io-network-ITERM-3182"
      significance="normal" startref="io-network-ITERM-3167"></indexterm>
      <indexterm class="endofrange" id="io-network-ITERM-3183"
      significance="normal" startref="io-network-ITERM-3168"></indexterm>
      <indexterm class="endofrange" id="io-network-ITERM-3184"
      significance="normal" startref="io-network-ITERM-3169"></indexterm> the
      JavaMail product page at <ulink
      url="http://java.sun.com/products/javamail">http://java.sun.com/products/javamail</ulink>.
      For more information about the JavaMail API, see Chapter 10, "JavaMail
      Best Practices," in <emphasis>Java Enterprise Best Practices</emphasis>
      (O'Reilly).</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-pop3" label="10.17" role="Recipe">
    <title>Checking a POP3 Mailbox</title>

    <sect2>
      <title>Problem</title>

      <para>You need to check a POP3 <indexterm id="io-network-ITERM-3185"
          significance="normal">
          <primary>Commons Net</primary>

          <secondary>POP3</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3186"
          significance="normal">
          <primary>POP3 (Post Office Protocol 3)</primary>
        </indexterm> <indexterm id="io-network-ITERM-3187"
          significance="normal">
          <primary>mailboxes, POP3</primary>
        </indexterm> <indexterm id="io-network-ITERM-3188"
          significance="normal">
          <primary>clients</primary>

          <secondary>POP3</secondary>
        </indexterm> <indexterm id="io-network-ITERM-3189"
          significance="normal">
          <primary>email</primary>

          <secondary>mailboxes</secondary>
        </indexterm>mailbox.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use Commons Net <literal moreinfo="none">POP3Client</literal> to
      check a POP3 mailbox for incoming mail. The following example connects
      to the <indexterm id="io-network-ITERM-3190" significance="normal">
          <primary>servers</primary>

          <secondary>POP3</secondary>
        </indexterm>POP3 server <filename
      moreinfo="none">www.discursive.com</filename>, logs in as <literal
      moreinfo="none">tobrien@discursive.com</literal>, and prints each
      message in the mailbox:</para>

      <programlisting format="linespecific" language="java">import org.apache.commons.io.CopyUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.net.pop3.POP3Client;
import org.apache.commons.net.pop3.POP3MessageInfo;

POP3Client client = new POP3Client( );
client.connect("www.discursive.com");
client.login("tobrien@discursive.com", "secretpassword");
        
POP3MessageInfo[] messages = client.listMessages( );
for (int i = 0; i &lt; messages.length; i++) {
    int messageNum = messages[i].number;
    System.out.println( "************* Message number: " + messageNum );
    Reader reader = client.retrieveMessage( messageNum );
    System.out.println( "Message:\n" + IOUtils.toString( reader ) );
    IOUtils.closeQuietly( reader );
}
        
client.logout( );
client.disconnect( );</programlisting>

      <para>This example calls <literal
      moreinfo="none">client.listMessage()</literal> <indexterm
          id="io-network-ITERM-3191" significance="normal">
          <primary>client.listMessage( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3192"
          significance="normal">
          <primary>methods</primary>

          <secondary>client.listMessage( )</secondary>
        </indexterm> to get an array of <literal
      moreinfo="none">POP3MessageInfo</literal> objects. Each message is
      retrieved using the message number contained in each <literal
      moreinfo="none">POP3MessageInfo</literal>. To retrieve the contents of
      an individual message, the message number is passed to <literal
      moreinfo="none">retrieveMessage()</literal> <indexterm
          id="io-network-ITERM-3193" significance="normal">
          <primary>retrieveMessage( ) method</primary>
        </indexterm> <indexterm id="io-network-ITERM-3194"
          significance="normal">
          <primary>methods</primary>

          <secondary>retrieveMessage( )</secondary>
        </indexterm>, which returns a <literal
      moreinfo="none">Reader</literal> from which the message body is read.
      The previous example prints the contents of a POP3 mailbox, as shown
      below:</para>

      <programlisting format="linespecific" id="I_10_tt432">************* Message number: 1
Message:
Return-Path: &lt;jerk@spamheaven.net&gt;
X-Original-To: tobrien@discursive.com
Delivered-To: tobrien@discursive.com
Received: from jerk-net.co.jp (unknown [219.71.255.123])
    by pericles.symbiont.net (Postfix) with SMTP id 6FA54543FE
    for &lt;tobrien@discursive.com&gt;; Tue, 22 Jun 2004 02:19:13 -0400 (EDT)
Received: from 228.4.65.206 by smtp.cito.nl;
    Tue, 22 Jun 2004 06:09:26 +0000
Message-ID: &lt;9b8001c4581f$2524e2e9$d8470c90@jerk-net.co.jp&gt;
From: "Spammer" &lt;jerk@spamheaven.net&gt;
To: tobrien@discursive.com
Subject: Hey, I heard you need a mortgage
Date: Tue, 22 Jun 2004 02:09:21 -0400
MIME-Version: 1.0
Content-Type: text/plain;
    charset="iso-8859-1"
Content-Transfer-Encoding: 8bit

Hello,

I heard that you must be a sucker, so I thought I would send you some 
unsolicited email about a mortgage.  Only 3%, and you can even wire 
the money directly to my friend from Nigeria.  Did I mention that if 
you decide to take this mortgage I'll send you the secret for making 
millions by sending useless spam.

---
Mr. Jerk Spammer
"I ruin email for everyone!"</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>This example did not venture into the topic of parsing an email
      message body. As shown above, the message read with <literal
      moreinfo="none">retrieveMessage( )</literal> is a raw message with SMTP
      headers containing the <filename moreinfo="none">Subject</filename>,
      <filename moreinfo="none">Message-ID</filename>, and other important
      pieces of data associated with a message. The body of a message is
      separated from a list of headers by a single blank, and if you are
      creating a mail client for a user, you will need to write a parser that
      can extract a relevant header—such as <filename
      moreinfo="none">Subject</filename> and <filename
      moreinfo="none">From</filename>—from the raw email message.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>This recipe used <literal moreinfo="none">IOUtils.toString(
      )</literal> and <literal moreinfo="none">IOUtils.closeQuietly(
      )</literal> to copy and close a <literal
      moreinfo="none">Reader</literal> for each email message. These methods
      are described in detail in <link
      linkend="io-network-sect-copying">Recipe 10.2</link> and <link
      linkend="io-network-sect-closing">Recipe 10.3</link>.</para>

      <para>For a good overview of SMTP and POP3 from the perspective of a
      FreeBSD administrator, take a look at Dru Lavigne's article
      "Understanding E-Mail" from OnLamp.com (<ulink
      url="http://www.onlamp.com/pub/a/bsd/2000/08/30/FreeBSD_Basics.html">http://www.onlamp.com/pub/a/bsd/2000/08/30/FreeBSD_Basics.html</ulink>).</para>
    </sect2>
  </sect1>

  <sect1 id="io-network-sect-subnet" label="10.18" role="Recipe">
    <title>Testing an IP Address Against a Subnet</title>

    <sect2>
      <title>Problem</title>

      <para>You have an IP address and you want to see if the IP address is
      contained on a subnet,</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Create an instance of <classname>SubnetUtils</classname> using
      either the Subnetwork's CIDR notation or the dot-decimal notation as
      shown in <xref linkend="io-network-ex-testing-subnet" />. Once you have
      created an instance of <classname>SubnetUtils</classname> you can
      retrieve an instance of <classname>SubnetUtils.SubnetInfo</classname>
      and call the <methodname>isInRange()</methodname> method to test an
      address.</para>

      <example id="io-network-ex-testing-subnet">
        <title>Testing an IP Address against a Subnet</title>

        <programlisting format="linespecific" id="I_10_tt431" language="java">package com.discursive.jccook.net;

import org.apache.commons.net.util.SubnetUtils;

public class SubnetUtilsExample {

public static void main(String[] args) {
    new SubnetUtilsExample().start();
  }

  public void start() {

    // Using Classless Inter-Domain Routing (CIDR) Notation
    String subnetCidr = "192.168.1.1/24";
    SubnetUtils subnet = new SubnetUtils(subnetCidr);

    String ipAddress = "192.168.1.23";
    boolean result = subnet.getInfo().isInRange(ipAddress);
    System.out.printf("Is %s in %s? %s\n", ipAddress, subnetCidr, result);

    ipAddress = "192.168.2.13";
    result = subnet.getInfo().isInRange(ipAddress);
    System.out.printf("Is %s in %s? %s\n\n", ipAddress, subnetCidr, result);

    // Using Dot-decimal notation
    String subnetAddress = "192.168.5.130";
    String dotDecimalMask = "255.255.255.192";
    subnet = new SubnetUtils(subnetAddress, dotDecimalMask);

    ipAddress = "192.168.5.140";
    result = subnet.getInfo().isInRange(ipAddress);
    System.out.printf("Is %s in %s (netmask %s)? %s\n", ipAddress, subnetAddress,
        dotDecimalMask, result);

    ipAddress = "192.168.5.213";
    result = subnet.getInfo().isInRange(ipAddress);
    System.out.printf("Is %s in %s (netmask %s)? %s\n", ipAddress, subnetAddress,
        dotDecimalMask, result);

  }
}
</programlisting>
      </example>

      <para>Running the example shown in <xref
      linkend="ex-io-network-testing-subnet" /> produces the following
      output:</para>

      <screen>Is 192.168.1.23 in 192.168.1.1/24? true
Is 192.168.2.13 in 192.168.1.1/24? false

Is 192.168.5.140 in 192.168.5.130 (netmask 255.255.255.192)? true
Is 192.168.5.213 in 192.168.5.130 (netmask 255.255.255.192)? false</screen>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>A subnet address and a subnet mask defines the space of available
      addresses in a subnet as well as the broadcast address for a particular
      network. You can use the <classname>SubnetUtils.SubnetInfo</classname>
      class as a way to derive this information from a subnet
      specification.</para>

      <example id="io-network-ex-printing-subnet">
        <title>Printing Information about a Subnet</title>

        <programlisting>package com.discursive.jccook.net;

import org.apache.commons.net.util.SubnetUtils;

public class SubnetInfoCalculator {
  
  public static void main(String[] args) {
    new SubnetInfoCalculator().start();
  }
  
  public void start() {
    SubnetUtils subnet = new SubnetUtils("164.232.43.23/26");
    System.out.printf( "%s\n", subnet.getInfo() );
  }

}
</programlisting>
      </example>

      <para>Running the example shown in <xref
      linkend="io-network-ex-printing-subnet" /> produces the following
      output:</para>

      <screen>CIDR Signature: [164.232.43.23/26] Netmask: [255.255.255.192]
Network:        [164.232.43.0]
Broadcast:      [164.232.43.63]
First Address:  [164.232.43.1]
Last Address:   [164.232.43.62]
# Addresses:    [62]
</screen>
    </sect2>
  </sect1>
</chapter>
