<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.discursive.com/docbook/xml/4.5/docbookx.dtd">
<chapter id="guava-collect" status="draft">
  <title>Google Guava: Collections</title>

  <sect1 id="guava-collect-sect-intro">
    <title>Introduction</title>

    <sect2>
      <title>What is Guava?</title>

      <para>Google Guava is a collection of simple core Java libraries used at
      Google. It is a collection of utility classes and static methods
      reminiscent of the Apache Commons components discussed in previous
      chapters.</para>
    </sect2>
  </sect1>

  <sect1 id="guava-collect-sect-obtaining" role="Recipe">
    <title>Obtaining Google Guava</title>

    <sect2>
      <title>Problem</title>

      <para>You need to use Google Guava in a project.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>To use Google Guava in a Maven 2 project, add the following
      dependency to your project's <filename>pom.xml</filename>:</para>

      <example id="guava-collect-ex-depend">
        <title>Adding a Dependency on Google Guava</title>

        <programlisting language="xml">&lt;dependency&gt;
  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;
  &lt;artifactId&gt;guava&lt;/artifactId&gt;
  &lt;version&gt;${googleguava.version}&lt;/version&gt;
&lt;/dependency&gt;
</programlisting>
      </example>

      <para>If you are not sure what this means, I'd suggest reading <ulink
      url="http://www.sonatype.com/books/maven-book">Maven: The Complete
      Reference</ulink>. When you depend on a library in Maven 2, all you need
      to do is add the dependency <varname>groupId</varname>,
      <varname>artifactId</varname>, and <varname>version</varname> to your
      project's dependencies. Once you do this, Maven 2 will download the
      dependency and make it available on your project's classpath.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For more information about the Google Guava project, see the
      project page at <ulink
      url="http://code.google.com/p/guava-libraries/">http://code.google.com/p/guava-libraries/</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="guava-collect-sect-union">
    <title>Obtaining the Union of Two Sets</title>

    <sect2>
      <title>Problem</title>

      <para>You need to combine the contents of two <classname>Set</classname>
      collections. You need the union of two <classname>Set</classname>
      objects.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Create two Set objects, then use the static
      <methodname>union()</methodname> method on the
      <classname>Sets</classname> class to create a read-only
      <classname>Set</classname> that combines unique elements from both
      collections.</para>

      <example id="guava-collect-ex-union">
        <title>Using Sets.union() to Calculate the Union of Two Set
        Collections</title>

        <programlisting language="java">package com.discursive.cjcook.guava.collect;

import java.util.Set;

import com.google.common.collect.Sets;

public class SetUnionExample {
  public static void main(String[] args) {
    Set&lt;String&gt; names1 = Sets.newHashSet();
    names1.add( "Tim" );
    names1.add( "Tom" );
    names1.add( "Ted" );

    Set&lt;String&gt; names2 = Sets.newHashSet();
    names2.add( "Susan" );
    names2.add( "Tony" );
    names2.add( "Ted" );
    
    Set&lt;String&gt; union = Sets.union( names1, names2 );
    for( String name : union ) {
      System.out.printf( "%s\n", name);
    }
  }
}
</programlisting>
      </example>

      <para>This example produces the following output:</para>

      <screen>Ted
Tom
Tim
Susan
Tony</screen>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <figure id="guava-collect-fig-union">
        <title>Calculating the Union of Two Sets</title>

        <mediaobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/guava-collect-set-union.pdf"
                       format="PDF" scalefit="0" width="100%" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/guava-collect-set-union.png"
                       format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>The Apache Commons Collections library also provides a set of
      utilities to perform set operations. For more information see <xref
      linkend="collections-sect-performing-set" />.</para>
    </sect2>
  </sect1>

  <sect1 id="guava-collect-sect-intersect">
    <title>Obtaining the Intersection of Two Sets</title>

    <sect2>
      <title>Problem</title>

      <para>You need to calculate the intersection of two Set objects.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Create two <classname>Set</classname> objects and then pass them
      to the static <methodname>intersection()</methodname> method on the
      <classname>Sets</classname> class as shown in the following
      example.</para>

      <example id="guava-collect-ex-intersect">
        <title>Calculating the Intersection of Two Sets</title>

        <programlisting language="java">package com.discursive.cjcook.guava.collect;

import java.util.Set;

import com.google.common.collect.Sets;

public class SetIntersectionExample {
  public static void main(String[] args) {
    Set&lt;String&gt; names1 = Sets.newHashSet();
    names1.add("Tim");
    names1.add("Tom");
    names1.add("Ted");

    Set&lt;String&gt; names2 = Sets.newHashSet();
    names2.add("Susan");
    names2.add("Tony");
    names2.add("Ted");

    Set&lt;String&gt; intersection = Sets.intersection(names1, names2);
    for (String name : intersection) {
      System.out.printf("%s\n", name);
    }
  }
}
</programlisting>
      </example>

      <para>This example produces the following output:</para>

      <screen>Ted</screen>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <figure id="guava-collect-fig-intersect">
        <title>Calculating the Intersection of Two Sets</title>

        <mediaobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/guava-collect-set-intersect.pdf"
                       format="PDF" scalefit="0" width="100%" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/guava-collect-set-intersect.png"
                       format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>The Apache Commons Collections library also provides a set of
      utilities to perform set operations. For more information see <xref
      linkend="collections-sect-performing-set" />.</para>
    </sect2>
  </sect1>

  <sect1 id="guava-collect-sect-diff">
    <title>Obtaining the Difference Between Two Sets</title>

    <sect2>
      <title>Problem</title>

      <para>You need to calculate the difference between two sets.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Create two Set objects and pass them to the static
      <methodname>difference()</methodname> method on the
      <classname>Sets</classname> class as shown in the following
      example.</para>

      <example id="guava-collect-ex-diff">
        <title>Calculating the Difference Between Two Sets</title>

        <programlisting language="java">package com.discursive.cjcook.guava.collect;

import java.util.Set;

import com.google.common.collect.Sets;

public class SetDifferenceExample {
  public static void main(String[] args) {
    Set&lt;String&gt; names1 = Sets.newHashSet();
    names1.add("Tim");
    names1.add("Tom");
    names1.add("Ted");

    Set&lt;String&gt; names2 = Sets.newHashSet();
    names2.add("Susan");
    names2.add("Tony");
    names2.add("Ted");

    Set&lt;String&gt; difference = Sets.difference(names1, names2);
    for (String name : difference) {
      System.out.printf("%s\n", name);
    }
  }
}
</programlisting>
      </example>

      <para>This example produces the following output:</para>

      <screen>Tom
Tim</screen>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <figure id="guava-collect-fig-difference">
        <title>Calculating the Difference of Two Sets</title>

        <mediaobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/guava-collect-set-difference.pdf"
                       format="PDF" scalefit="0" width="100%" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/guava-collect-set-difference.png"
                       format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>The Apache Commons Collections library also provides a set of
      utilities to perform set operations. For more information see <xref
      linkend="collections-sect-performing-set" />.</para>
    </sect2>
  </sect1>

  <sect1 id="guava-collect-sect-symdiff">
    <title>Obtaining the Symmetric Difference Between Two Sets</title>

    <sect2>
      <title>Problem</title>

      <para>You need to calculate the symmetric difference between two
      <classname>Set</classname> objects.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Create two <classname>Set</classname> objects and pass them to the
      static <methodname>symmetricDifference()</methodname> method on the
      <classname>Sets</classname> class as shown in the following
      example.</para>

      <example id="guava-collect-ex-symdiff">
        <title>Calculating the Symmetric Difference Between Two Sets</title>

        <programlisting language="java">package com.discursive.cjcook.guava.collect;

import java.util.Set;

import com.google.common.collect.Sets;

public class SetSymDiffExample {
  public static void main(String[] args) {
    Set&lt;String&gt; names1 = Sets.newHashSet();
    names1.add("Tim");
    names1.add("Tom");
    names1.add("Ted");

    Set&lt;String&gt; names2 = Sets.newHashSet();
    names2.add("Susan");
    names2.add("Tony");
    names2.add("Ted");

    Set&lt;String&gt; symDiff = Sets.symmetricDifference(names1, names2);
    for (String name : symDiff) {
      System.out.printf("%s\n", name);
    }
  }
}
</programlisting>
      </example>

      <para>This example produces the following output:</para>

      <screen>Tom
Tim
Susan
Tony</screen>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <figure id="guava-collect-fig-symdiff">
        <title>Calculating the Symmetric Difference of Two Sets</title>

        <mediaobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/guava-collect-set-symdiff.pdf"
                       format="PDF" scalefit="0" width="100%" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/guava-collect-set-symdiff.png"
                       format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>The Apache Commons Collections library also provides a set of
      utilities to perform set operations. For more information see <xref
      linkend="collections-sect-performing-set" />.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Generate All Possible Subsets of a Set</title>

    <sect2>
      <title>Problem</title>

      <para>You need to generate all possible subsets of a given set of
      elements.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Create a <classname>Set</classname> and pass it to the static
      <methodname>powerSet()</methodname> method on the
      <classname>Sets</classname> class as shown in the following
      example.</para>

      <example id="guava-collect-ex-powerset">
        <title>Generating all Possible Subsets of a Given Set</title>

        <programlisting language="java">package com.discursive.cjcook.guava.collect;

import java.util.Set;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Sets;

public class PowerSetExample {
  public static void main(String[] args) {
    Set&lt;Integer&gt; integers = ImmutableSet.of(1, 2, 3, 4, 5);
  
    Set&lt;Set&lt;Integer&gt;&gt; powerSet = Sets.powerSet( integers );
    for( Set&lt;Integer&gt; set : powerSet ) {
      System.out.printf( "Powerset: %s\n", set );
    }
  }
}
</programlisting>
      </example>

      <para>This example produces the following output:</para>

      <screen>Powerset: []
Powerset: [1]
Powerset: [2]
Powerset: [1, 2]
Powerset: [3]
Powerset: [1, 3]
Powerset: [2, 3]
Powerset: [1, 2, 3]
Powerset: [4]
Powerset: [1, 4]
Powerset: [2, 4]
Powerset: [1, 2, 4]
Powerset: [3, 4]
Powerset: [1, 3, 4]
Powerset: [2, 3, 4]
Powerset: [1, 2, 3, 4]
Powerset: [5]
Powerset: [1, 5]
Powerset: [2, 5]
Powerset: [1, 2, 5]
Powerset: [3, 5]
Powerset: [1, 3, 5]
Powerset: [2, 3, 5]
Powerset: [1, 2, 3, 5]
Powerset: [4, 5]
Powerset: [1, 4, 5]
Powerset: [2, 4, 5]
Powerset: [1, 2, 4, 5]
Powerset: [3, 4, 5]
Powerset: [1, 3, 4, 5]
Powerset: [2, 3, 4, 5]
Powerset: [1, 2, 3, 4, 5]</screen>
    </sect2>
  </sect1>

  <sect1 id="guava-collect-sect-multisets">
    <title>Working with Multisets</title>

    <sect2>
      <title>Problem</title>

      <para>You need a <classname>Set</classname> with cardinality. Instead of
      a Set containing single instances of unique objects, you want to be able
      to keep track of a <classname>Set</classname> of objects where each
      object may be present in the <classname>Set</classname> one or more
      times.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use a Multiset collection from the Google Guava library.</para>

      <example id="guava-collect-ex-multiset">
        <title>Using a Multiset</title>

        <programlisting>package com.discursive.cjcook.guava.collect;

import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.Set;

import com.google.common.collect.HashMultiset;
import com.google.common.collect.Multiset;
import com.google.common.collect.TreeMultiset;
import com.google.common.collect.Multiset.Entry;

public class MultisetsExample {
  public static void main(String args[]) {

    PrintStream out = System.out;
    Multiset&lt;String&gt; multiset = HashMultiset.create();

    multiset.add("Red Ball", 5);
    multiset.add("Yellow Ball", 10);
    multiset.add("Blue Ball", 20);

    out.printf("Multiset #1: %s\n", multiset);

    out.printf("Multiset #1 contains a Red Ball? %s\n", multiset
        .contains("Red Ball"));
    out.println("Removing Five Red Balls from Multiset #1\n");
    
    multiset.remove("Red Ball", 5);

    out.printf("Multiset contains a Red Ball? %s\n", multiset
        .contains("Red Ball"));

    Multiset&lt;String&gt; multiset2 = TreeMultiset.create();
    multiset2.add("Blue Ball", 20);
    multiset2.add("Yellow Ball", 10);

    out.printf("\nMultiset #1: %s", multiset);
    out.printf("\nMultiset #2: %s", multiset2);
    out.printf("\nMultiset #1 and #2 are equal? %s", multiset
        .equals(multiset2));

    out.println("\n\nRemoving One Blue Ball from multiset2");
    multiset2.remove("Blue Ball");

    out.printf("\nMultiset #1: %s", multiset);
    out.printf("\nMultiset #2: %s", multiset2);
    out.printf("\nMultiset #1 and #2 are equal? %s", multiset
        .equals(multiset2));
  }
}
</programlisting>
      </example>

      <para>This example produces the following output:</para>

      <screen>
Multiset #1: [Blue Ball x 20, Red Ball x 5, Yellow Ball x 10]

Multiset contains a Red Ball? true

Removing Five Reb Balls

Multiset contains a Red Ball? false
Multiset #1: [Blue Ball x 20, Yellow Ball x 10]
Multiset #2: [Blue Ball x 20, Yellow Ball x 10]
Multiset #1 and #2 are equal? true

Removing One Blue Ball from multiset2

Multiset #1: [Blue Ball x 20, Yellow Ball x 10]
Multiset #2: [Blue Ball x 19, Yellow Ball x 10]
Multiset #1 and #2 are equal? false</screen>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <figure id="guava-collect-fig-multiset">
        <title>Obtaining the entrySet() or the elementSet() from a
        Multiset</title>

        <mediaobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/guava-collect-multiset.pdf"
                       format="PDF" scalefit="0" width="100%" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/guava-collect-multiset.png"
                       format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>The Apache Commons Collections library provides a similar
      interface calls a Bag. For more information, see <xref
      linkend="collections-sect-bag" />.</para>

      <para>For more information about the bag data structure, look at a
      definition from the National Institute of Standards and Technology
      (NIST) at <ulink
      url="http://www.nist.gov/dads/HTML/bag.html">http://www.nist.gov/dads/HTML/bag.html</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="guava-collect-sect-bimap">
    <title>Retrieving a Key by Value (Working with Bi-directional
    Maps)</title>

    <sect2>
      <title>Problem</title>

      <para>You need a <literal moreinfo="none">Map</literal> that allows you
      to access a value by a key and a key by a value.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use a BiMap from the Google Guava library.</para>

      <example id="guava-collect-ex-bimap">
        <title>Using a BiMap</title>

        <programlisting>package com.discursive.cjcook.guava.collect;

import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;

public class BiMapExample {
  public static void main(String[] args) {
  
    BiMap&lt;String, String&gt; countryCodes = HashBiMap.create();

        countryCodes.put("to","Tonga");
        countryCodes.put("tr","Turkey");
        countryCodes.put("tv","Tuvalu");
        countryCodes.put("tz","Tanzania");
        countryCodes.put("ua","Ukraine");
        countryCodes.put("ug","Uganda");
        countryCodes.put("uk","United Kingdom");
        countryCodes.put("um","USA Minor Outlying Islands");
        countryCodes.put("us","United States");
        countryCodes.put("uy","Uruguay");

        String countryName = (String) countryCodes.get( "tr" );
        System.out.println( "Country Name for code 'tr': " + countryName );

        String countryCode = 
            (String) countryCodes.inverse().get("Uruguay");
        System.out.println( "Country Code for name 'Uruguay': " + countryCode );
            
    }
    
}
</programlisting>
      </example>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <figure id="guava-collect-fig-bimap">
        <title>Generating the Inverse of a BiMap</title>

        <mediaobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/guava-collect-bimap.pdf"
                       format="PDF" scalefit="0" width="100%" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/guava-collect-bimap.png" format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>Apache Commons Collections has a similar interface calls the
      BidiMap. For more information on the BidiMap, see <xref
      linkend="collections-sect-key-by-value" />.</para>
    </sect2>
  </sect1>

  <sect1 id="guava-collect-sect-const">
    <title>Adding Constraints to a Collection (List or Set)</title>

    <sect2>
      <title>Problem</title>

      <para>You want to make sure that the entries in a Collection are
      validated as they are added to that Collection</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Create a constraing by implementing the Constraint interface in
      Google Guava. This interface defines a checkElement() method which you
      can override with your own validation logic. If the element to be
      inserted in a Collection meets your validation criteria, just return it.
      If the object fails validation, throw a
      <classname>RuntimeException</classname>.</para>

      <example id="guava-collect-ex-const">
        <title>Defining a Custom Constraint</title>

        <programlisting>package com.discursive.cjcook.guava.collect;

import com.google.common.collect.Constraint;

public class MPGConstraint implements Constraint&lt;Automobile&gt; {

  private Integer minimumMPG;

  public MPGConstraint(int minimumMPG) {
    this.minimumMPG = minimumMPG;
  }

  @Override
  public Automobile checkElement(Automobile element) {
    if (element.getMilesPerGallon() != null
        &amp;&amp; element.getMilesPerGallon() &lt; minimumMPG) {
      throw new IllegalArgumentException(
          "Automobile does not meet minimum fuel standards");
    }
    return element;
  }
}
</programlisting>
      </example>

      <example id="guava-collect-ex-constex">
        <title>Adding Constraints to a Collection</title>

        <programlisting>package com.discursive.cjcook.guava.collect;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.common.collect.Constraints;

public class ConstraintsExample {

  public static void main(String[] args) {

    Automobile camry = new Automobile("Toyota", "Camry", 34);
    Automobile hummer = new Automobile("Hummer", "H2", 8);
    Automobile forrester = new Automobile("Subaru", "Forrester", 22);

    List&lt;Automobile&gt; efficientCars = Constraints.constrainedList(
        new ArrayList&lt;Automobile&gt;(), new MPGConstraint(30));
    for (Automobile car : new Automobile[] { camry, hummer, forrester }) {
      try {
        efficientCars.add(car);
        System.out.printf(
            "Added a %s %s to the Efficient Cars List.\n", car
                .getMake(), car.getModel());
      } catch (IllegalArgumentException e) {
        System.out.printf(
          "I'm sorry, but a %s %s is not efficient enough.\n",
          car.getMake(), car.getModel());
      }
    }
  }
}
</programlisting>
      </example>

      <para>This example produces the following output:</para>

      <screen>Added a Toyota Camry to the Efficient Cars List.
I'm sorry, but a Hummer H2 is not efficient enough.
I'm sorry, but a Subaru Forrester is not efficient enough.
</screen>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <figure id="guava-collect-fig-constrained-collection">
        <title>Constraining a Collection</title>

        <mediaobject>
          <imageobject role="print">
            <imagedata align="center"
                       fileref="figs/print/guava-collect-constrained-collection.pdf"
                       format="PDF" scalefit="0" width="100%" />
          </imageobject>

          <imageobject role="web">
            <imagedata fileref="figs/web/guava-collect-constrained-collection.png"
                       format="PNG" />
          </imageobject>
        </mediaobject>
      </figure>
    </sect2>
  </sect1>

  <sect1 id="guava-collect-sect-mapconst">
    <title>Adding Constraints to a Map</title>

    <sect2>
      <title>Problem</title>

      <para>You want to make sure that a <classname>Map</classname> doesn't
      contain invalid entries.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Define a custom <classname>MapConstraint</classname> to validate
      both the key and value to be added to a <classname>Map</classname>.
      Create a constrained <classname>Map</classname> with a call to the
      static <methodname>constrainedMap()</methodname> method on
      <classname>MapConstraints</classname>.</para>

      <example id="guava-collect-ex-mapconst">
        <title>Defining a custom MapConstraint</title>

        <programlisting>package com.discursive.cjcook.guava.collect;

import com.google.common.collect.MapConstraint;

public class PersonConstraint implements MapConstraint&lt;String, Person&gt; {

  @Override
  public void checkKeyValue(String key, Person value) {
    String regex = "^(?!000)([0-6]\\d{2}|7([0-6]\\d|7[012]))([ -]?)"
        + "(?!00)\\d\\d\\3(?!0000)\\d{4}$";

    if (!key.matches(regex)) {
      throw new IllegalArgumentException(
          "Key not a valid Social Security Number");
    }

    if (value == null) {
      throw new IllegalArgumentException("Person cannot be null");
    } else if (value != null
        &amp;&amp; (value.getFirstName() == null || value.getLastName() == null)) {
      throw new IllegalArgumentException(
          "Person must have a non-empty first and last name");
    }
  }
}
</programlisting>
      </example>

      <example id="guava-collect-ex-mapconstex">
        <title>Validating entries as they are added to Map with
        MapConstraints.</title>

        <programlisting>package com.discursive.cjcook.guava.collect;

import java.util.HashMap;
import java.util.Map;

import com.google.common.collect.MapConstraints;

public class MapConstraintsExample {

  public static void main(String[] args) {
    Person bill = new Person("Bill", "Clinton", "012-68-4378");
    Person nancy = new Person("Nancy", null, "(212) 232-2332");
    Person richard = new Person("Richard", "Coasby", "000-00-0000");

    Map&lt;String, Person&gt; people = MapConstraints.constrainedMap(
        new HashMap&lt;String, Person&gt;(), new PersonConstraint());

    for (Person person : new Person[] { bill, nancy, richard }) {
      try {
        System.out.printf("Adding %s to Constrained Map\n", person
            .getFirstName());
        people.put(person.getSsn(), person);
        System.out.printf("SUCCESS Added %s\n", person.getFirstName());
      } catch (IllegalArgumentException e) {
        System.out.printf("FAILURE Error adding person to Map: %s\n", e
            .getMessage());
      }
    }
  }

}
</programlisting>
      </example>

      <para>This example produces the following output:</para>

      <screen>Adding Bill to Constrained Map
SUCCESS Added Bill
Adding Nancy to Constrained Map
FAILURE Error adding person to Map: Key not a valid Social Security Number
Adding Richard to Constrained Map
FAILURE Error adding person to Map: Key not a valid Social Security Number
</screen>
    </sect2>
  </sect1>
</chapter>
