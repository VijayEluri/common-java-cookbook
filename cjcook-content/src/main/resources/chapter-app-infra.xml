<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://mars.discursive.com/docbook/xml/4.5/docbookx.dtd">
<chapter id="app-infra" label="7" xmlns:db="http://discursive.com/plugins/docbook">
  <title>Application Infrastructure</title>

  <sect1 id="app-infra-sect-intro">
    <title>Introduction</title>

    <para>The plumbing of an application—command-line parsing, configuration,
    and logging—can be viewed as application infrastructure. This chapter
    introduces a few tools to help applications work with configuration,
    arguments, and log files: Commons CLI for command-line parsing, Commons
    Configuration for reading application configuration from properties files
    and XML documents, Commons Logging, and Log4J.</para>
  </sect1>

  <sect1 id="app-infra-sect-obtaining" label="1.1" role="Recipe">
    <title>Depending on Commons CLI</title>

    <sect2>
      <title>Problem</title>

      <para>You need to use <indexterm id="app-infra-ITERM-2781"
          significance="normal">
          <primary>Commons CLI</primary>

          <secondary>downloading</secondary>
        </indexterm> <indexterm id="app-infra-ITERM-2782"
          significance="normal">
          <primary>downloading</primary>

          <secondary>Commons CLI</secondary>
        </indexterm> <indexterm id="app-infra-ITERM-2783"
          significance="normal">
          <primary>applications</primary>

          <secondary>Commons CLI</secondary>

          <tertiary>downloading</tertiary>
        </indexterm> <indexterm id="app-infra-ITERM-2784"
          significance="normal">
          <primary>infrastructure (Commons CLI)</primary>

          <secondary>downloading</secondary>
        </indexterm> <indexterm id="app-infra-ITERM-2785"
          significance="normal">
          <primary>interfaces</primary>

          <secondary>Commons CLI, downloading</secondary>
        </indexterm>Commons CLI (Command-Line Interface) to parse an
      application's command-line arguments.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>To use Commons CLI 1.1 in a Maven 2 project, add the following
      dependency to your project's <filename>pom.xml</filename>:</para>

      <example id="app-infra-ex-add-depend-cli">
        <title>Adding a Dependency on Commons CLI</title>

        <programlisting db:artifact="${project.groupId}:cjcook-examples:${project.version}:src:zip"
                        db:file="cjcook-examples-${project.version}/pom.xml"
                        db:xpath="//dependency[artifactId='commons-cli']"/>

      </example>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>If you are not sure what this means, I'd suggest reading <ulink
      url="http://www.sonatype.com/books/maven-book">Maven: The Complete Reference</ulink>. When you depend on a library in Maven 2, all you need to
      do is add the dependency <varname>groupId</varname>,
      <varname>artifactId</varname>, and <varname>version</varname> to your
      project's dependencies. Once you do this, Maven 2 will download the
      dependency and make it available on your project's classpath.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For more information about the Commons CLI project, see the
      Commons CLI project page at <ulink
      url="http://commons.apache.org/cli/">http://commons.apache.org/cli</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-parsing-simple-cmdline" label="7.2" role="Recipe">
    <title>Parsing a Simple Command Line</title>

    <sect2>
      <title>Problem</title>

      <para>You need to parse a simple command line containing optional and
      required arguments.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use Commons CLI to parse program arguments. Populate an <literal
      moreinfo="none">Options</literal> object to configure command-line
      parsing. Pass the <literal moreinfo="none">Options</literal> class and a
      <literal moreinfo="none">String[]</literal> of arguments to a <literal
      moreinfo="none">CommandLineParser</literal>, which parses and returns a
      <literal moreinfo="none">CommandLine</literal> object capturing the
      supplied options and parameters.</para>

      <para>For the purposes of this recipe, assume that you are attempting to
      parse a command line with three optional arguments: <literal
      moreinfo="none">-h</literal>,<filename moreinfo="none"> </filename>
      <literal moreinfo="none">-v</literal>, and <literal moreinfo="none">-f
      &lt;filename&gt;</literal>. <literal moreinfo="none">-h</literal> prints
      out a simple help message with usage information and available
      command-line options, <literal moreinfo="none">-v</literal> runs the
      program with verbose logging, and <literal moreinfo="none">-f</literal>
      sends the output of the application to a file. To parse this command
      line, your <literal moreinfo="none">main( )</literal> method would
      resemble the following code:</para>

      <programlisting format="linespecific" id="I_7_tt296"><userinput
          moreinfo="none">import org.apache.commons.cli.CommandLineParser;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.BasicParser;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.Options;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.CommandLine;</userinput>

<userinput moreinfo="none">public static void</userinput> main(String[] args) <userinput
          moreinfo="none">throws</userinput> Exception {

  // Create a Parser
  CommandLineParser parser = <userinput moreinfo="none">new</userinput> BasicParser( );
  Options options = <userinput moreinfo="none">new</userinput> Options( );
  options.addOption("h", "help", <userinput moreinfo="none">false</userinput>, "Print this usage information");
  options.addOption("v", "verbose", <userinput moreinfo="none">false</userinput>, "Print out VERBOSE information" );
  options.addOption("f", "file", <userinput moreinfo="none">true</userinput>, "File to save program output to");

  // Parse the program arguments
  CommandLine commandLine = parser.parse( options, args );

  // Set the appropriate variables based on supplied options
<userinput moreinfo="none">  boolean</userinput> verbose = <userinput
          moreinfo="none">false</userinput>;
  String file = "";
  
<userinput moreinfo="none">  if</userinput>( commandLine.hasOption('h') ) {
    System.out.println( "Help Message")
    System.exit(0);
  }

<userinput moreinfo="none">  if</userinput>( commandLine.hasOption('v') ) {
    verbose = <userinput moreinfo="none">true</userinput>;
  }

<userinput moreinfo="none">  if</userinput>( commandLine.hasOption('f') ) {
    file = commandLine.getOptionValue('f');
  }
}</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>The <literal moreinfo="none">Options</literal> object tells the
      <literal moreinfo="none">CommandLineParser</literal> <indexterm
          id="app-infra-ITERM-2786" significance="normal">
          <primary>CommandLineParser</primary>
        </indexterm> to <indexterm id="app-infra-ITERM-2787"
          significance="normal">
          <primary>parsing</primary>

          <seealso>Commons CLI</seealso>
        </indexterm>expect three arguments: <literal
      moreinfo="none">-h</literal>, <literal moreinfo="none">-v</literal>, and
      <literal moreinfo="none">-f</literal>. The first argument to <literal
      moreinfo="none">options.addOption( )</literal> is the short name or
      abbreviation of the option, and the second argument is the long name of
      the argument. When the long name of an option is specified, either may
      be used as program arguments. For example, a command line specifying
      short-name arguments, <literal moreinfo="none">-h</literal> <filename
      moreinfo="none"> </filename> <literal moreinfo="none">-v</literal>
      <filename moreinfo="none"> </filename> <literal
      moreinfo="none">-f</literal> <filename moreinfo="none"> </filename>
      <literal moreinfo="none">test.xml</literal>, is equivalent to a command
      line specifying long-name arguments, <literal
      moreinfo="none">--help</literal> <filename moreinfo="none"> </filename>
      <literal moreinfo="none">--version</literal> <filename moreinfo="none">
      </filename> <literal moreinfo="none">--file</literal> <literal
      moreinfo="none">test.xml</literal>, and both short- and long-name
      arguments may be mixed in the same command line. The third argument to
      <literal moreinfo="none">options.addOption()</literal> <indexterm
          id="app-infra-ITERM-2788" significance="normal">
          <primary>options.addOption( ) method</primary>
        </indexterm> <indexterm id="app-infra-ITERM-2789"
          significance="normal">
          <primary>methods</primary>

          <secondary>options.addOption( )</secondary>
        </indexterm> specifies whether the option takes a parameter; in the
      previous example, only the file option expects a parameter. The fourth
      parameter is a <literal moreinfo="none">String</literal> containing a
      description of the option for a user.</para>

      <para>An <literal moreinfo="none">Options</literal> object may be
      configured using the <literal moreinfo="none">options.addOption(
      )</literal>, or an <literal moreinfo="none">Option</literal> object can
      be created and added to the <literal moreinfo="none">Options</literal>
      object. The following code is equivalent to the call to <literal
      moreinfo="none">options.addOption( )</literal> in the previous example,
      which adds the help option:</para>

      <programlisting format="linespecific" id="I_7_tt297">Option helpOption = new Option("h", "Prints this usage information");
helpOption.setLongOpt( "help" );
options.addOption( helpOption );</programlisting>

      <para>Both the <literal moreinfo="none">Options</literal> object and the
      <literal moreinfo="none">args String[]</literal> are passed to <literal
      moreinfo="none">parser.parse( )</literal>, which returns a <literal
      moreinfo="none">CommandLine</literal> object. <literal
      moreinfo="none">CommandLine</literal> captures the supplied program
      arguments, and provides access to the supplied options and arguments.
      <literal moreinfo="none">commandLine.hasOption('h')</literal> checks for
      the presence of the optional help choice, and <literal
      moreinfo="none">commandLine.getOptionValue('f')</literal> retrieves the
      filename argument for the file option.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>In this recipe, <literal moreinfo="none">BasicParser</literal>
      <indexterm id="app-infra-ITERM-2790" significance="normal">
          <primary>BasicParser</primary>
        </indexterm> <indexterm id="app-infra-ITERM-2791"
          significance="normal">
          <primary>parsing</primary>

          <secondary>BasicParser</secondary>
        </indexterm>, an implementation of <literal
      moreinfo="none">CommandLineParser</literal>, is used to parse command
      lines. This implementation allows for mixed short- and long-name
      options: <literal moreinfo="none">-f</literal> <literal
      moreinfo="none">test.xml</literal> <literal
      moreinfo="none">--help</literal>. If you are developing an application
      that needs to parse arguments using POSIX Conventions, use <literal
      moreinfo="none">org.apache.commons.cli.PosixParser</literal> instead of
      <literal moreinfo="none">BasicParser</literal>. If you need to parse
      arguments using the less strict GNU conventions, use the <literal
      moreinfo="none">org.apache.commons.cli.GNUParser</literal>.</para>

      <para>For background about the differences between POSIX and GNU
      standards, see Section 4.6 of the "GNU Coding Standards" (<ulink
      url="http://www.gnu.org/prep/standards_18.html">http://www.gnu.org/prep/standards_18.html</ulink>).
      For information about POSIX syntax guidelines, see Section 12.2,
      "Utility Syntax Guidelines" of "The Single UNIX Specification Version 3"
      (<ulink
      url="http://www.unix-systems.org/online.html">http://www.unix-systems.org/online.html</ulink>),
      also known as IEEE Standard 1003.1 and ISO/IEC 9945.</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-parsing-complex-cmdline" label="7.3" role="Recipe">
    <title>Parsing a Complex Command Line</title>

    <sect2>
      <title>Problem</title>

      <para>You need to parse a command line with two exclusive
      options.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Store mutually exclusive <literal moreinfo="none">Option</literal>
      objects in an <literal moreinfo="none">OptionGroup</literal>, and add
      this <literal moreinfo="none">OptionGroup</literal> to an <literal
      moreinfo="none">Options</literal> object using the <literal
      moreinfo="none">addOptionGroup( )</literal> method. Assume you are
      working with the following program argument specification: <literal
      moreinfo="none">-h</literal>, <literal
      moreinfo="none">-v</literal>,<filename moreinfo="none"> </filename>and
      <literal moreinfo="none">-f</literal> <literal
      moreinfo="none">&lt;filename&gt;</literal> <literal
      moreinfo="none">|</literal> <literal moreinfo="none">-m
      &lt;email&gt;</literal>. <literal moreinfo="none">-h</literal> and
      <literal moreinfo="none">-v</literal> are both optional and only one of
      <literal moreinfo="none">-f</literal> or <literal
      moreinfo="none">-m</literal> can be specified. If both <literal
      moreinfo="none">-m</literal> and <literal moreinfo="none">-f</literal>
      are supplied as program arguments, an exception is thrown. In the
      following example, the <literal moreinfo="none">-f</literal> and
      <literal moreinfo="none">-m</literal> options are added to an <literal
      moreinfo="none">OptionGroup</literal>, which is then added to the
      <literal moreinfo="none">Options</literal> object used to parse the
      program arguments:</para>

      <programlisting format="linespecific" id="I_7_tt298"><userinput
          moreinfo="none">import org.apache.commons.cli.CommandLineParser;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.BasicParser;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.Options;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.OptionBuilder;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.OptionGroup;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.CommandLine;</userinput>

<userinput moreinfo="none">public</userinput> <userinput moreinfo="none">static</userinput> <userinput
          moreinfo="none">void</userinput> main(String[] args) <userinput
          moreinfo="none">throws</userinput> Exception {

  // Create a Parser
  CommandLineParser parser = <userinput moreinfo="none">new</userinput> BasicParser( );
  Options options = <userinput moreinfo="none">new</userinput> Options( );
  options.addOption("h", "help", <userinput moreinfo="none">false</userinput>, "Print this usage information");
  options.addOption("v", "verbose", <userinput moreinfo="none">false</userinput>, "Print out VERBOSE information" );

  OptionGroup optionGroup = <userinput moreinfo="none">new</userinput> OptionGroup( ); 
  optionGroup.addOption( OptionBuilder.hasArg(<userinput moreinfo="none">true</userinput>).create('f') );
  optionGroup.addOption( OptionBuilder.hasArg(<userinput moreinfo="none">true</userinput>).create('m') );
  options.addOptionGroup( optionGroup );

  // Parse the program arguments
  CommandLine commandLine = parser.parse( options, args );

  // ... do important stuff ...
}</programlisting>

      <para>If the user supplies both <literal moreinfo="none">-f</literal>
      and <literal moreinfo="none">-m</literal> at the same time, the <literal
      moreinfo="none">CommandLineParser</literal> will throw an <literal
      moreinfo="none">AlreadySelectedException</literal>.</para>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>In the Solution, the <literal moreinfo="none">-f</literal> and
      <literal moreinfo="none">-m</literal> options were created using the
      <literal moreinfo="none">OptionBuilder</literal> class. This utility
      lets you build an <literal moreinfo="none">Option</literal> object by
      chaining a series of method calls. For example, the following code
      creates a required option, "b," which takes an argument:</para>

      <programlisting format="linespecific" id="I_7_tt299">Option option = OptionBuilder.hasArgs(true).isRequired(true).create('b');</programlisting>

      <para><literal moreinfo="none">OptionGroup</literal> objects are a good
      way to enforce the structure of command-line options. If you were
      parsing the command line with a <literal
      moreinfo="none">StringTokenizer</literal> and keeping track of all of
      the specified options that may or may not have parameters, this could
      involve 30 or 40 lines of code just to manage this validation process.
      By using Commons CLI, you delegate this complexity and cut down on the
      amount of code you need to maintain.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>What happens if a user specifies two options from an <literal
      moreinfo="none">OptionGroup</literal>? Does the application just fail
      catastrophically from a <literal
      moreinfo="none">RuntimeException</literal>? Usually, if a program has a
      problem parsing command-line arguments, it will print out a helpful
      usage message. "Printing Usage Information" demonstrates the use of CLI
      to automatically create a usage message.</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-print-usage" label="7.4" role="Recipe">
    <title>Printing Usage Information</title>

    <sect2>
      <title>Problem</title>

      <para>You need to provide the <indexterm id="app-infra-ITERM-2792"
          significance="normal">
          <primary>Commons CLI</primary>

          <secondary>printing usage information</secondary>
        </indexterm> <indexterm id="app-infra-ITERM-2793"
          significance="normal">
          <primary>applications</primary>

          <secondary>Commons CLI</secondary>

          <tertiary>printing usage information</tertiary>
        </indexterm> <indexterm id="app-infra-ITERM-2794"
          significance="normal">
          <primary>infrastructure (Commons CLI)</primary>

          <secondary>printing usage information</secondary>
        </indexterm> <indexterm id="app-infra-ITERM-2795"
          significance="normal">
          <primary>printing</primary>

          <secondary>usage information</secondary>
        </indexterm>user with a formatted list of available options.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Pass an <literal moreinfo="none">Options</literal> object to a
      <literal moreinfo="none">HelpFormatter</literal> <indexterm
          id="app-infra-ITERM-2796" significance="normal">
          <primary>HelpFormatter</primary>
        </indexterm> <indexterm id="app-infra-ITERM-2797"
          significance="normal">
          <primary>formatting</primary>

          <secondary>HelpFormatter</secondary>
        </indexterm> and print a usage message. <link
      linkend="app-infra-ex-1">Example 7-1</link> creates the same <literal
      moreinfo="none">Options</literal> object from <link
      linkend="app-infra-sect-parsing-complex-cmdline">Recipe 7.3</link>. If
      the help option is specified, or if there is a problem parsing the
      program arguments, the <literal moreinfo="none">printUsage()</literal>
      <indexterm id="app-infra-ITERM-2798" significance="normal">
          <primary>printUsage( ) method</primary>
        </indexterm> <indexterm id="app-infra-ITERM-2799"
          significance="normal">
          <primary>methods</primary>

          <secondary>printUsage( )</secondary>
        </indexterm> method is called to print usage information to <literal
      moreinfo="none">System.out</literal>.</para>

      <example id="app-infra-ex-1" label="7-1">
        <title>Printing usage information with HelpFormatter</title>

        <programlisting format="linespecific"><userinput moreinfo="none">import org.apache.commons.cli.CommandLineParser;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.BasicParser;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.Options;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.OptionBuilder;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.OptionGroup;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.CommandLine;</userinput>
<userinput moreinfo="none">import org.apache.commons.cli.HelpFormatter;</userinput>

<userinput moreinfo="none">public class SomeApp {</userinput>

 <userinput moreinfo="none"> private static final String USAGE = "[-h] [-v] [-f &lt;file&gt; | -m &lt;email&gt;]";</userinput>
<userinput moreinfo="none">  private static final String HEADER =</userinput>
                  <userinput moreinfo="none">        "SomeApp - A fancy and expensive program, Copyright 2010 Blah.";</userinput>
<userinput moreinfo="none">  private static final String FOOTER =</userinput>
                  <userinput moreinfo="none">        "For more instructions, see our website at: http://www.blah123.org";</userinput>

<userinput moreinfo="none">  public</userinput> <userinput moreinfo="none">static</userinput> <userinput
            moreinfo="none">void</userinput> main(String[] args) <userinput
            moreinfo="none">throws</userinput> Exception {

    // Create a Parser
    CommandLineParser parser = <userinput moreinfo="none">new</userinput> BasicParser( );
    Options options = <userinput moreinfo="none">new</userinput> Options( );
    options.addOption("h", "help", <userinput moreinfo="none">false</userinput>, "Print this usage information");
        options.addOption("v", "verbose", <userinput moreinfo="none">false</userinput>, "Print out VERBOSE information" );

    OptionGroup optionGroup = new OptionGroup( ); 
    optionGroup.addOption( OptionBuilder.hasArg(true).withArgName("file")
                                        .withLongOpt("file").create('f') );
    optionGroup.addOption( OptionBuilder.hasArg(true).withArgName("email")
                                        .withLongOpt("email").create('m') );
    options.addOptionGroup( optionGroup );
    // Parse the program arguments
    try {
      CommandLine commandLine = parser.parse( options, args );
      <userinput moreinfo="none">if</userinput>( commandLine.hasOption('h') ) {
        printUsage( options );
        System.exit(0);
      }
    
      // ... do important stuff ...
    } catch( Exception e ) {
      System.out.println( "You provided bad program arguments!" );
      printUsage( options );
      System.exit(1);
    }

<userinput moreinfo="none">    private</userinput> static <userinput
            moreinfo="none">void</userinput> printUsage(Options options) {
      HelpFormatter helpFormatter = <userinput moreinfo="none">new</userinput> HelpFormatter( );
      helpFormatter.setWidth( 80 );
      helpFormatter.printHelp( USAGE, HEADER, options, FOOTER );
    }
}</programlisting>
      </example>

      <para>When this application is executed and the parser encounters an
      unexpected program argument, the following output is produced:</para>

      <programlisting format="linespecific" id="I_7_tt300">You provided bad program arguments!
usage: [-h] [-v] [-f &lt;file&gt; | -m &lt;email&gt;]
SomeApp - A fancy and expensive program, Copyright 2010 Blah.
 -f,--file &lt;file&gt;
 -h,--help            Print this usage information
 -m,--email &lt;email&gt;
 -v,--verbose         Print out VERBOSE information
For more instructions, see our website at: http://www.blah123.org</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>If an exception is thrown during <literal
      moreinfo="none">parser.parse( )</literal>, the application will print an
      error message and call <literal moreinfo="none">printUsage( )</literal>,
      which creates a <literal moreinfo="none">HelpFormatter</literal> object
      and sets the display width to 80 characters. <literal
      moreinfo="none">helpFormatter.printHelp( )</literal> prints to standard
      out and takes five parameters, including the <literal
      moreinfo="none">Options</literal> object, which contains configuration
      for the <literal moreinfo="none">CommandLineParser</literal>. The first
      parameter specified a usage string, which is an abbreviated
      specification of the program arguments: <literal
      moreinfo="none">-h</literal>,<filename moreinfo="none"> </filename>
      <literal moreinfo="none">-v</literal>, and <literal
      moreinfo="none">-f</literal> <literal
      moreinfo="none">&lt;file&gt;</literal> <literal
      moreinfo="none">|</literal> <literal moreinfo="none">-m
      &lt;email&gt;</literal>. The second argument is a header to print before
      the list of available options. The third parameter is the same <literal
      moreinfo="none">Options</literal> object passed to the <literal
      moreinfo="none">CommandLineParser</literal>. <literal
      moreinfo="none">HelpFormatter</literal> will use this <literal
      moreinfo="none">Options</literal> object to print out the short name,
      long name, and description of each option. The fourth parameter is a
      footer to display after the list of options.</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-obtaining-comfiguration" label="1.1" role="Recipe">
    <title>Depending on Commons Configuration</title>

    <sect2>
      <title>Problem</title>

      <para>You need to use <indexterm id="app-infra-ITERM-2800"
          significance="normal">
          <primary>Commons Configuration</primary>

          <secondary>downloading</secondary>
        </indexterm> <indexterm id="app-infra-ITERM-2801"
          significance="normal">
          <primary>downloading</primary>

          <secondary>Commons Configuration</secondary>
        </indexterm> <indexterm id="app-infra-ITERM-2802"
          significance="normal">
          <primary>configuration</primary>

          <secondary>Commons Configuration</secondary>

          <tertiary>downloading</tertiary>
        </indexterm>Commons Configuration to access configuration stored in
      properties files and XML documents.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>To use Commons Configuration 1.6 in a Maven 2 project, add the
      following dependency to your project's
      <filename>pom.xml</filename>:</para>

      <example id="app-infra-ex-add-depend-configuration">
        <title>Adding a Dependency on Commons Configuration</title>

        <programlisting db:artifact="${project.groupId}:cjcook-examples:${project.version}:src:zip"
                        db:file="cjcook-examples-${project.version}/pom.xml"
                        db:xpath="//dependency[artifactId='commons-configuration']"/>
      </example>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>If you are not sure what this means, I'd suggest reading <ulink
      url="http://www.sonatype.com/books/maven-book">Maven: The Complete Reference</ulink>. When you depend on a library in Maven 2, all you need to
      do is add the dependency <varname>groupId</varname>,
      <varname>artifactId</varname>, and <varname>version</varname> to your
      project's dependencies. Once you do this, Maven 2 will download the
      dependency and make it available on your project's classpath.</para>

      <para>Commons Configuration is designed to provide access to <indexterm
          id="app-infra-ITERM-2803" significance="normal">
          <primary>applications</primary>

          <secondary>Commons Configuration</secondary>

          <tertiary>downloading</tertiary>
        </indexterm>application configuration in the form of properties files,
      XML documents, JNDI resources, or data from a JDBC <literal
      moreinfo="none">Datasource</literal>. Commons Configuration also allows
      you to create a hierarchical or multileveled configuration allowing for
      default settings to be selectively overridden by local configuration.
      Commons Configuration also provides typed access to single- and
      multivalued configuration parameters.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For more information about the Commons Configuration project, see
      the Commons Configuration project page at <ulink
      url="http://commons.apache.org/configuration/">http://commons.apache.org/configuration</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-config-properties" label="7.6" role="Recipe">
    <title>Configuring Applications with Properties Files</title>

    <sect2>
      <title>Problem</title>

      <para>You need to access configuration parameters as typed objects. In
      other words, you have configuration parameters that may be numbers or
      lists of strings, and you want to access them as typed objects instead
      of first retrieving them as <literal moreinfo="none">String</literal>
      objects from a <literal moreinfo="none">Properties</literal>
      object.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use the <literal moreinfo="none">PropertiesConfiguration</literal>
      from Commons Configuration in the <literal
      moreinfo="none">org.apache.commons.configuration</literal> package. This
      class loads a properties file and provides access to numbers, arrays,
      and lists. The following properties file contains three properties:
      <literal moreinfo="none">speed</literal> is a floating-point number,
      <literal moreinfo="none">names</literal> is a comma-separated list of
      strings, and <literal moreinfo="none">correct</literal> is a boolean
      value:</para>

      <programlisting format="linespecific" id="I_7_tt301">speed=23.332
names=Bob,Gautam,Jarret,Stefan
correct=false</programlisting>

      <para>This properties file is stored in <filename
      moreinfo="none">test.properties</filename> in the working directory of
      an application, which needs access to all three properties as a <literal
      moreinfo="none">float</literal>, <literal
      moreinfo="none">List</literal>, and <literal
      moreinfo="none">boolean</literal>. The following code creates a <literal
      moreinfo="none">PropertiesConfiguration</literal> and accesses each
      property:</para>

      <programlisting format="linespecific" id="I_7_tt302">import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.PropertiesConfiguration;

Configuration config = new PropertiesConfiguration( "test.properties" );
        
float speed = config.getFloat("speed"));
List names = config.getList("names"));
boolean correct = config.getBoolean("correct");</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>Passing a <literal moreinfo="none">String</literal> to the
      constructor of <literal
      moreinfo="none">PropertiesConfiguration</literal> will load
      configuration properties from a file named <filename
      moreinfo="none">test.properties</filename>. Properties are then
      referenced by the key of the property in the properties file. This
      recipe demonstrates a modest improvement upon the existing <literal
      moreinfo="none">Properties</literal> class that ships with the J2SE. The
      methods provided by the <literal moreinfo="none">Configuration</literal>
      interface enable you to retrieve properties with a specific type,
      throwing a <literal moreinfo="none">NumberFormatException</literal>,
      <literal moreinfo="none">ClassCastException</literal>, and <literal
      moreinfo="none">NoSuchElementException</literal> if there is a problem
      finding or parsing a property value.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For a full list of the methods provided by the <indexterm
          id="app-infra-ITERM-2804" significance="normal">
          <primary>interfaces</primary>

          <secondary>Commons Configuration</secondary>
        </indexterm> <literal moreinfo="none">Configuration</literal>
      interface, see the Commons Configuration JavaDoc at <ulink
      url="http://jakarta.apache.org/commons/configuration/apidocs">http://commons.apache.org/configuration/apidocs</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-config-xml" label="7.7" role="Recipe">
    <title>Configuring Applications with XML</title>

    <sect2>
      <title>Problem</title>

      <para>You need to configure an <indexterm class="startofrange"
          id="app-infra-ITERM-2805" significance="normal">
          <primary>applications</primary>

          <secondary>Commons Configuration</secondary>

          <tertiary>XML documents</tertiary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2806"
          significance="normal">
          <primary>Commons Configuration</primary>

          <secondary>XML documents</secondary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2807"
          significance="normal">
          <primary>configuration</primary>

          <secondary>Commons Configuration</secondary>

          <tertiary>XML documents</tertiary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2808"
          significance="normal">
          <primary>documents</primary>

          <secondary>XML</secondary>

          <tertiary>Common Configuration</tertiary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2809"
          significance="normal">
          <primary>XML (Extensible Markup Language)</primary>

          <secondary>Commons Configuration</secondary>
        </indexterm>application with an XML document.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use an implementation of <literal
      moreinfo="none">XMLConfiguration</literal> to load configuration
      parameters from an XML document. The following XML document contains
      configuration information that is loaded with a <literal
      moreinfo="none">DOMConfiguration</literal> object:</para>

      <programlisting format="linespecific" id="I_7_tt303">&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;

&lt;engine-config&gt;
    &lt;start-criteria&gt;
        &lt;criteria type="critical"&gt;
            Temperature Above -10 Celsius
        &lt;/criteria&gt;
        &lt;criteria&gt;
            Fuel tank is not empty
        &lt;/criteria&gt;
    &lt;/start-criteria&gt;
    &lt;name&gt;
        &lt;first&gt;Tom&lt;/first&gt;
        &lt;last&gt;Payne&lt;/last&gt;
    &lt;/name&gt;
    &lt;horsepower&gt;42&lt;/horsepower&gt;
&lt;/engine-config&gt;</programlisting>

      <para>A <literal moreinfo="none">DOMConfiguration</literal> object uses
      the Xerces XML parser to parse an entire XML document into a DOM
      <literal moreinfo="none">Document</literal> object. Subsequent calls to
      methods on the <literal moreinfo="none">Configuration</literal>
      interface cause the <literal moreinfo="none">DOMConfiguration</literal>
      object to traverse nodes in the <literal
      moreinfo="none">Document</literal>. The code to read in this XML
      configuration with <literal moreinfo="none">DOMConfiguration</literal>
      follows:</para>

      <programlisting format="linespecific" id="I_7_tt304">import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.DOMConfiguration;

String resource = "com/discursive/jccook/configuration/global.xml";
Configuration config = new DOMConfiguration(resource);
        
// Retrieve a list of all Criteria elements
List startCriteria = config.getList("start-criteria.criteria");

// Retrieve the value of the first criteria element
String firstCriteria = config.getString("start-criteria.criteria(0)");

// Retrieve the type attribute of the first criteria element
String firstCriteriaType = config.getString("start-criteria.criteria(0)[@type]");

// Retrieve the horsepower as an int
int horsepower = config.getInt("horsepower");</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>Passing a <literal moreinfo="none">String</literal> to the
      constructor of <literal moreinfo="none">DOMConfiguration</literal> loads
      an XML document from the classpath as a resource. If you need to load
      XML configuration from a file, pass a <literal
      moreinfo="none">File</literal> object to the <literal
      moreinfo="none">DOMConfiguration</literal> constructor. Configuration
      parameters are retrieved using methods from the <literal
      moreinfo="none">Configuration</literal> interface, and parameters are
      referenced using a syntax that resembles XPath. Subelements are
      referenced by appending a period and the subelement name to the name of
      an element; in this example, <literal
      moreinfo="none">name.first</literal> references the subelement <literal
      moreinfo="none">first</literal> of the element <literal
      moreinfo="none">name</literal>. Attributes are referenced by prefixing
      an attribute name with an @ and surrounding the reference with brackets;
      in this example, <literal
      moreinfo="none">start-critera.criteria(0)[@type]</literal> references
      the <literal moreinfo="none">type</literal> attribute of the <literal
      moreinfo="none">criteria</literal> element. Specific elements in a list
      of elements are referenced by surrounding the index with parentheses;
      <literal moreinfo="none">start-criteria.criteria(0)</literal> references
      the first <literal moreinfo="none">criteria</literal> element.</para>

      <para><literal moreinfo="none">DOMConfiguration</literal> will only work
      if the Xerces XML parser is available in your classpath. If Xerces is
      not available, you may use another implementation of <literal
      moreinfo="none">XMLConfiguration</literal>, <literal
      moreinfo="none">DOM4JConfiguration</literal>, which is written to parse
      an XML document using DOM4J. To use the <literal
      moreinfo="none">DOM4JConfiguration</literal>, make sure that DOM4J is in
      your classpath, and interchange <literal
      moreinfo="none">DOM4JConfiguration</literal> with <literal
      moreinfo="none">DOMConfiguration</literal> from the previous
      example.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For more information about downloading the Xerces XML parser, see
      the Xerces project page at <ulink
      url="http://xml.apache.org/xerces">http://xml.apache.org/xerces</ulink>.</para>

      <para>For more information about downloading DOM4J, see the DOM4J
      project page at <ulink
      url="http://www.dom4j.org">http://www.dom4j.org</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-composite-config" label="7.8" role="Recipe">
    <title>Using Composite Configuration</title>

    <sect2>
      <title>Problem</title>

      <para>Your application calls for a multilayered configuration where a
      set of default properties can be selectively overridden by local or user
      configuration preferences.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Create a <filename moreinfo="none">configuration.xml</filename>
      file that contains references to multiple properties files, and pass
      this file to a <literal moreinfo="none">ConfigurationFactory</literal>.
      A <literal moreinfo="none">ConfigurationFactory</literal> will then
      return a <literal moreinfo="none">Configuration</literal> implementation
      that obtains configuration parameters from multiple properties
      file.</para>

      <para><link linkend="app-infra-TABLE-1">Table 7-1</link> lists
      configuration properties<indexterm id="app-infra-ITERM-2810"
          significance="normal">
          <primary>properties</primary>

          <secondary>configuration</secondary>
        </indexterm> for an application. A global configuration layer defines
      default values for configuration parameters. A local configuration layer
      allows you to customize the behavior of a system at a particular site,
      and the user configuration layer refines configuration parameters for a
      specific user. When an application retrieves the value of "name," the
      user layer's value of "Sean" overrides the global layer's value of
      "Default User."</para>

      <table id="app-infra-TABLE-1" label="7-1">
        <title>Three layers of configuration</title>

        <tgroup cols="4">
          <colspec colname="col1" colnum="1" />

          <colspec colname="col2" colnum="2" />

          <colspec colname="col3" colnum="3" />

          <colspec colname="col4" colnum="4" />

          <thead>
            <row>
              <entry><para>Property</para></entry>

              <entry><para>Global</para></entry>

              <entry><para>Local</para></entry>

              <entry><para>User</para></entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><para>threads.max</para></entry>

              <entry><para>50</para></entry>

              <entry><para>30</para></entry>

              <entry></entry>
            </row>

            <row>
              <entry><para>threads.min</para></entry>

              <entry><para>20</para></entry>

              <entry></entry>

              <entry><para>1</para></entry>
            </row>

            <row>
              <entry><para>timeout</para></entry>

              <entry><para>15.52</para></entry>

              <entry></entry>

              <entry></entry>
            </row>

            <row>
              <entry><para>interactive</para></entry>

              <entry><para>TRUE</para></entry>

              <entry></entry>

              <entry></entry>
            </row>

            <row>
              <entry><para>color</para></entry>

              <entry><para>red</para></entry>

              <entry></entry>

              <entry><para>black</para></entry>
            </row>

            <row>
              <entry><para>speed</para></entry>

              <entry><para>50</para></entry>

              <entry><para>55</para></entry>

              <entry><para>75</para></entry>
            </row>

            <row>
              <entry><para>name</para></entry>

              <entry><para>Default User</para></entry>

              <entry></entry>

              <entry><para>Sean</para></entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>Properties are stored in three separate files shown in Examples
      <link linkend="app-infra-ex-2">Example 7-2</link> (<filename
      moreinfo="none">global.properties</filename>), <link
      linkend="app-infra-ex-3">Example 7-3</link> (<filename
      moreinfo="none">local.properties</filename>), and <link
      linkend="app-infra-ex-4">Example 7-4</link> (<filename
      moreinfo="none">user.properties</filename>).</para>

      <example id="app-infra-ex-2" label="7-2">
        <title>global. properties</title>

        <indexterm id="app-infra-ITERM-2811" significance="normal">
          <primary>properties</primary>

          <secondary>global.properties</secondary>
        </indexterm>

        <indexterm id="app-infra-ITERM-2812" significance="normal">
          <primary>global.properties</primary>
        </indexterm>

        <programlisting format="linespecific">threads.max=50
threads.min=2
timeout=15.52
interactive=true
color=red
speed=50
name=Default User</programlisting>
      </example>

      <example id="app-infra-ex-3" label="7-3">
        <title>local .properties</title>

        <indexterm id="app-infra-ITERM-2813" significance="normal">
          <primary>properties</primary>

          <secondary>local.properties</secondary>
        </indexterm>

        <indexterm id="app-infra-ITERM-2814" significance="normal">
          <primary>local.properties</primary>
        </indexterm>

        <programlisting format="linespecific"># Overrides Global Props
threads.max=30
speed=55</programlisting>
      </example>

      <example id="app-infra-ex-4" label="7-4">
        <title>user. properties</title>

        <indexterm id="app-infra-ITERM-2815" significance="normal">
          <primary>user.properties</primary>
        </indexterm>

        <indexterm id="app-infra-ITERM-2816" significance="normal">
          <primary>properties</primary>

          <secondary>user.properties</secondary>
        </indexterm>

        <programlisting format="linespecific"># Overrides Local Props
threads.min=1
color=black
speed=5000
name=Sean</programlisting>
      </example>

      <para>A <filename moreinfo="none">configuration.xml</filename> file
      provides a configuration for the <literal
      moreinfo="none">ConfigurationFactory</literal>. This file is stored as a
      resource in the classpath, and the URL for this resource is passed to
      the <literal moreinfo="none">setConfigurationURL( )</literal> method of
      <literal moreinfo="none">ConfigurationFactory</literal>. The following
      <filename moreinfo="none">configuration.xml</filename> will create a
      <literal moreinfo="none">Configuration</literal> object, which locates
      properties from properties files using the override order defined in the
      XML document. <filename moreinfo="none">user.properties</filename>
      overrides <filename moreinfo="none">local.properties</filename>, which
      overrides <filename moreinfo="none">global.properties</filename>:</para>

      <programlisting format="linespecific" id="I_7_tt305">&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;

&lt;configuration&gt;
    &lt;properties fileName="user.properties"/&gt;
    &lt;properties fileName="local.properties"/&gt;
    &lt;properties fileName="global.properties"/&gt;
&lt;/configuration&gt;</programlisting>

      <para>The following code passes the URL of the <filename
      moreinfo="none">configuration.xml</filename> resource to a <literal
      moreinfo="none">ConfigurationFactory</literal>, and a <literal
      moreinfo="none">Configuration</literal> instance is returned, which
      resolves application configuration parameters according to the rules
      outlined above:</para>

      <programlisting format="linespecific" id="I_7_tt306">import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.ConfigurationFactory;

// Configure Factory 
ConfigurationFactory factory = new ConfigurationFactory( );
URL configURL = this.getClass( ).getResource("configuration.xml");
factory.setConfigurationURL( configURL );

Configuration config = factory.getConfiguration( );

// Print out properties
System.out.println( "Timeout: " + config.getFloat("timeout"));
System.out.println( "Max Threads: " + config.getString("threads.max"));
System.out.println( "Name: " + config.getString("name"));
System.out.println( "Speed: " + config.getInt("speed"));</programlisting>

      <para>This code executes and prints the value of four properties to the
      console. The <literal moreinfo="none">timeout</literal> property is
      retrieved from <filename moreinfo="none">global.properties</filename>,
      the <literal moreinfo="none">threads.max</literal> property is retrieved
      from <filename moreinfo="none">local.properties</filename>, and both
      <literal moreinfo="none">speed</literal> and <literal
      moreinfo="none">name</literal> are retrieved from <filename
      moreinfo="none">user.properties</filename>:</para>

      <programlisting format="linespecific" id="I_7_tt307">Timeout: 15.52
Max Threads: 30
Name: Sean
Speed: 75</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>The <filename moreinfo="none">configuration.xml</filename>
      <indexterm id="app-infra-ITERM-2817" significance="normal">
          <primary>configuration.xml file</primary>
        </indexterm> <indexterm id="app-infra-ITERM-2818"
          significance="normal">
          <primary>files</primary>

          <secondary>configuration.xml</secondary>
        </indexterm> file instructs the <literal
      moreinfo="none">ConfigurationFactory</literal> to create a <literal
      moreinfo="none">Configuration</literal> implementation based on multiple
      properties files. In the previous example, when the application
      retrieves a property, there is no parameter signifying the source of the
      property. There is no mechanism for obtaining the source of a
      configuration property; in other words, there is no way for our
      application to see which properties file a particular value was obtained
      from, and there is no mechanism for enumerating the properties in a
      single properties file. The <filename
      moreinfo="none">configuration.xml</filename> file "configures" the
      <literal moreinfo="none">ConfigurationFactory</literal> to create a
      <literal moreinfo="none">Configuration</literal>—complexity is hidden
      from the application and the source of configuration can be changed with
      no effect to this example.</para>

      <para>A <filename moreinfo="none">configuration.xml</filename> file can
      also instruct a <literal moreinfo="none">ConfigurationFactory</literal>
      <indexterm id="app-infra-ITERM-2819" significance="normal">
          <primary>ConfigurationFactory</primary>
        </indexterm> to use a mixture of properties files and XML documents.
      The following <filename moreinfo="none">configuration.xml</filename>
      instructs the <literal moreinfo="none">ConfigurationFactory</literal> to
      create a <literal moreinfo="none">Configuration</literal> instance that
      looks for properties from a properties file and an XML document:</para>

      <programlisting format="linespecific" id="I_7_tt308">&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;

&lt;configuration&gt;
    &lt;properties fileName="test.properties"/&gt;
    &lt;dom4j fileName="test.xml"/&gt;
&lt;/configuration&gt;</programlisting>

      <para>With this configuration, a <literal
      moreinfo="none">Configuration</literal> instance will attempt to locate
      a property with a matching key in <filename
      moreinfo="none">test.properties</filename> before it attempts to locate
      the matching property in <filename moreinfo="none">test.xml</filename>.
      See <link linkend="app-infra-config-xml">Recipe 7.7</link> for more
      information about retrieving configuration from XML documents.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>In addition to properties files<indexterm class="endofrange"
      id="app-infra-ITERM-2820" significance="normal"
      startref="app-infra-ITERM-2805"></indexterm> <indexterm
      class="endofrange" id="app-infra-ITERM-2821" significance="normal"
      startref="app-infra-ITERM-2806"></indexterm> <indexterm
      class="endofrange" id="app-infra-ITERM-2822" significance="normal"
      startref="app-infra-ITERM-2807"></indexterm> <indexterm
      class="endofrange" id="app-infra-ITERM-2823" significance="normal"
      startref="app-infra-ITERM-2808"></indexterm> <indexterm
      class="endofrange" id="app-infra-ITERM-2824" significance="normal"
      startref="app-infra-ITERM-2809"></indexterm> and XML documents, Commons
      Configuration can also be instructed to resolve configuration properties
      from a JNDI tree using <literal
      moreinfo="none">org.apache.commons.configuration.JNDIConfiguration</literal>.
      For more information on accessing properties in a JNDI tree using
      Commons Configuration, see the "Configuration Overview" page on the
      Commons Configuration project site (<ulink
      url="http://jakarta.apache.org/commons/configuration/overview.html">http://commons.apache.org/configuration/overview.html</ulink>).</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-obtaining-logging" label="7.9" role="Recipe">
    <title>Depending on Commons Logging</title>

    <sect2>
      <title>Problem</title>

      <para>You need to use <indexterm class="startofrange"
          id="app-infra-ITERM-2825" significance="normal">
          <primary>Commons Logging, downloading</primary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2826"
          significance="normal">
          <primary>logging</primary>

          <secondary>Commons Logging, downloading</secondary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2827"
          significance="normal">
          <primary>frameworks, Commons Logging</primary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2828"
          significance="normal">
          <primary>applications</primary>

          <secondary>Commons Logging, downloading</secondary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2829"
          significance="normal">
          <primary>downloading</primary>

          <secondary>Commons Logging</secondary>
        </indexterm>Commons Logging to develop a system that works under
      various logging frameworks, including Sun's logging framework and Apache
      Log4J.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>To use Commons Logging 1.0.4 in a Maven 2 project, add the
      following dependency to your project's
      <filename>pom.xml</filename>:</para>

      <example id="app-infra-ex-add-depend-logging">
        <title>Adding a Dependency on Commons Logging</title>

        <programlisting db:artifact="${project.groupId}:cjcook-examples:${project.version}:src:zip"
                        db:file="cjcook-examples-${project.version}/pom.xml"
                        db:xpath="//dependency[artifactId='commons-logging']"/>

      </example>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>If you are not sure what this means, I'd suggest reading <ulink
      url="http://www.sonatype.com/books/maven-book">Maven: The Complete Reference</ulink>. When you depend on a library in Maven 2, all you need to
      do is add the dependency <varname>groupId</varname>,
      <varname>artifactId</varname>, and <varname>version</varname> to your
      project's dependencies. Once you do this, Maven 2 will download the
      dependency and make it available on your project's classpath.</para>

      <para>Commons Logging was created for developers who need to create
      components or libraries that may need to operate in environments with
      different logging frameworks, including Apache Log4J and the built-in
      logging framework introduced in Java 1.4. Using Commons Logging, a
      component like Commons BeanUtils or Commons Digester can write log
      messages to an abstracted <literal moreinfo="none">Log</literal>
      interface, and Commons Logging can deal with passing these log messages
      to whichever logging framework is available.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For more information about Commons Logging, see the Commons
      Logging project site (<ulink
      url="http://commons.apache.org/logging/">http://commons.apache.org/logging</ulink>).</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-abstract-logging" label="7.10" role="Recipe">
    <title>Using an Abstract Logging Interface</title>

    <sect2>
      <title>Problem</title>

      <para>You are writing a reusable library, and you do not know where or
      how your code will execute. You need to write log messages to an
      abstracted logging interface because you cannot count on the presence of
      Log4J or JDK 1.4 logging.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Write messages to the Commons Logging <literal
      moreinfo="none">Log</literal> <indexterm id="app-infra-ITERM-2830"
          significance="normal">
          <primary>Log interface</primary>
        </indexterm> <indexterm id="app-infra-ITERM-2831"
          significance="normal">
          <primary>interfaces</primary>

          <secondary>Log</secondary>
        </indexterm> interface, and rely on Commons Logging to decide which
      concrete logging framework to use at runtime. The following code uses
      the <literal moreinfo="none">Log</literal> interface to log trace,
      debug, info, warning, error, and fatal messages:</para>

      <programlisting format="linespecific" id="I_7_tt310">import org.apache.commons.logging.LogFactory;
import org.apache.commons.logging.Log

Log log = LogFactory.getLog( "com.discursive.jccook.SomeApp" ); 

if( log.isTraceEnabled( ) ) {
    log.trace( "This is a trace message" );
}

if( log.isDebugEnabled( ) ) {
    log.debug( "This is a debug message" );
}

log.info( "This is an informational message" );

log.warn( "This is a warning" );

log.error( "This is an error" );

log.fatal( "This is fatal" );</programlisting>

      <para><literal moreinfo="none">LogFactory.getInstance( )</literal>
      returns an implementation of the <literal moreinfo="none">Log</literal>
      interface, which corresponds to an underlying concrete logging
      framework. For example, if your system is configured to use Apache
      Log4J, a <literal moreinfo="none">Log4JLogger</literal> is returned,
      which corresponds to the Log4J category <filename
      moreinfo="none">com.discursive.jccook.SomeApp</filename>.</para>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>The developers of a reusable library can rarely predict where and
      when such a library will be used, and since there are a number of
      logging frameworks currently available, it makes sense to use Commons
      Logging when developing reusable components such as Commons components.
      When <literal moreinfo="none">LogFactory.getInstance()</literal>
      <indexterm id="app-infra-ITERM-2832" significance="normal">
          <primary>LogFactory.getInstance( ) method</primary>
        </indexterm> <indexterm id="app-infra-ITERM-2833"
          significance="normal">
          <primary>methods</primary>

          <secondary>logFactory.getInstance( )</secondary>
        </indexterm> is called, Commons Logging takes care of locating and
      managing the appropriate logging framework by testing a number of system
      properties and libraries available on the classpath. For the developer
      of a small reusable component, the complexity ends at the calls to the
      <literal moreinfo="none">Log</literal> interface; the burden of
      configuring the underlying logging framework is shifted to the developer
      integrating this library into a larger system.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para><link linkend="app-infra-sect-specify-log-impl">Recipe 7.11</link>
      details the algorithm Commons Logging uses to identify the appropriate
      concrete logging framework to use at runtime.</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-specify-log-impl" label="7.11" role="Recipe">
    <title>Specifying a Logging Implementation</title>

    <sect2>
      <title>Problem</title>

      <para>You are using a component that writes log messages with Commons
      Logging, and you need to configure the underlying logging
      implementation.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>If the system property <filename
      moreinfo="none">org.apache.commons.logging.Log </filename>is not set,
      Commons Logging will use Apache Log4J if it is available in the
      classpath. To explicitly configure Commons Logging to use Log4J, set the
      <filename moreinfo="none">org.apache.commons.logging.Log</filename>
      property to <literal
      moreinfo="none">org.apache.commons.logging.impl.Log4JLogger</literal>
      with the following statement:</para>

      <programlisting format="linespecific" id="I_7_tt311">System.setProperty( "org.apache.commons.logging.Log",
                    "org.apache.commons.logging.impl.Log4JLogger" );</programlisting>

      <para>If the system property <filename
      moreinfo="none">org.apache.commons.logging.Log</filename> is not set and
      Apache Log4J is not available on the classpath, Commons Logging will
      then use the built-in JDK 1.4 logging framework. To explicitly configure
      Commons Logging to use the JDK 1.4 logging framework, set the <filename
      moreinfo="none">org.apache.commons.logging.Log</filename> property to
      <literal
      moreinfo="none">org.apache.commons.logging.impl.Jdk14Logger</literal>.</para>

      <para>If neither Apache Log4J nor the JDK 1.4 logging framework is
      available on the classpath and the <filename
      moreinfo="none">org.apache.commons.logging.Log</filename> system
      property is not set, Commons Logging uses a basic logging implementation
      named <literal moreinfo="none">SimpleLog</literal>. To explicitly
      configure Commons Logging to use <literal
      moreinfo="none">SimpleLog</literal>, set the <filename
      moreinfo="none">org.apache.commons.logging.Log</filename> property to
      <literal
      moreinfo="none">org.apache.commons.logging.impl.SimpleLog</literal>.</para>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>To summarize, Commons Logging performs the following steps when
      choosing an underlying logging implementation:</para>

      <orderedlist continuation="restarts" inheritnum="ignore">
        <listitem>
          <para>Checks the <filename
          moreinfo="none">org.apache.commons.logging.Log</filename> system
          property. If this property is set, use the class specified in this
          property.</para>
        </listitem>

        <listitem>
          <para>Checks for the presence of Log4J in the classpath. If Log4J is
          present, use a <literal moreinfo="none">Log4JLogger</literal>
          instance.</para>
        </listitem>

        <listitem>
          <para>Checks for the presence of the JDK 1.4 logging framework. If
          JDK 1.4 is present, use a <literal
          moreinfo="none">JDK14Logger</literal> instance.</para>
        </listitem>
      </orderedlist>

      <para>If neither Log4J nor JDK 1.4 is available, use <literal
      moreinfo="none">SimpleLog</literal>.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For more information about the configuration of Apache Log4J, see
      <link linkend="app-infra-sect-log4j-properties">Recipe 7.13</link> and
      <link linkend="app-infra-sect-log4j-xml">Recipe 7.14</link>. For more
      information about the configuration of the JDK 1.4 logging framework,
      see Sun's documentation of this framework at <ulink
      url="http://java.sun.com/j2se/1.4.2/docs/guide/util/logging/">http://java.sun.com/j2se/1.4.2/docs/guide/util/logging/</ulink>.</para>

      <para><literal moreinfo="none">SimpleLog</literal> is a very simple
      logger that can be used when an application does not need a complex
      logging framework. For more information about configuring <literal
      moreinfo="none">SimpleLog</literal> via system properties, read the
      <indexterm class="endofrange" id="app-infra-ITERM-2834"
      significance="normal" startref="app-infra-ITERM-2825"></indexterm>
      <indexterm class="endofrange" id="app-infra-ITERM-2835"
      significance="normal" startref="app-infra-ITERM-2826"></indexterm>
      <indexterm class="endofrange" id="app-infra-ITERM-2836"
      significance="normal" startref="app-infra-ITERM-2827"></indexterm>
      <indexterm class="endofrange" id="app-infra-ITERM-2837"
      significance="normal" startref="app-infra-ITERM-2828"></indexterm>
      <indexterm class="endofrange" id="app-infra-ITERM-2838"
      significance="normal"
      startref="app-infra-ITERM-2829"></indexterm>Commons Logging JavaDoc at
      <ulink
      url="http://jakarta.apache.org/commons/logging/api/index.html">http://commons.apache.org/logging/api/index.html</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-obtaining-log4j" label="7.12" role="Recipe">
    <title>Depending on Apache Log4J</title>

    <sect2>
      <title>Problem</title>

      <para>You need to use Apache Log4J to print<indexterm
          class="startofrange" id="app-infra-ITERM-2839" significance="normal">
          <primary>Apache Log4J</primary>

          <secondary>downloading</secondary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2840"
          significance="normal">
          <primary>downloading</primary>

          <secondary>Apache Log4J</secondary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2841"
          significance="normal">
          <primary>printing</primary>

          <secondary>Apache Log4J</secondary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2842"
          significance="normal">
          <primary>debugging</primary>

          <secondary>Apache Log4J</secondary>
        </indexterm> <indexterm class="startofrange" id="app-infra-ITERM-2843"
          significance="normal">
          <primary>applications</primary>

          <secondary>Apache Log4J</secondary>
        </indexterm> statements to a log file for informational or debugging
      purposes.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>To use Apache Log4J 1.2.15 in a Maven 2 project, add the following
      dependency to your project's <filename>pom.xml</filename>:</para>

      <example id="app-infra-ex-add-depend-log4j">
        <title>Adding a Dependency on Apache Log4J</title>

        <programlisting db:artifact="${project.groupId}:cjcook-examples:${project.version}:src:zip"
                        db:file="cjcook-examples-${project.version}/pom.xml"
                        db:xpath="//dependency[artifactId='log4j']"/>
      </example>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para>Apache Log4J (formerly known as Jakarta Log4J) is a highly
      configurable logging framework providing hierarchical loggers, various
      log destinations, and log formats. Messages are written to Log4J
      <literal moreinfo="none">Logger</literal> objects, which represent a
      specific category in a hierarchy of log categories; for example, the
      <filename moreinfo="none">com.discursive.Blah</filename> category is a
      child of the <filename moreinfo="none">com.discursive</filename>
      category. All messages sent to a child category are sent to each
      ancestor in a tree of <literal moreinfo="none">Logger</literal>
      categories. A category can be assigned an <literal
      moreinfo="none">Appender</literal> and a <literal
      moreinfo="none">Layout</literal>; an <literal
      moreinfo="none">Appender</literal> controls where a message is sent, and
      a <literal moreinfo="none">Layout</literal> defines the formatting and
      contents of a message. Log4J ships with a number of <literal
      moreinfo="none">Appender</literal> implementations, including <literal
      moreinfo="none">SMTPAppender</literal>, <literal
      moreinfo="none">RollingFileAppender</literal>, <literal
      moreinfo="none">SocketAppender</literal>, <literal
      moreinfo="none">SyslogAppender</literal>, and <literal
      moreinfo="none">NTEventLogAppender</literal>. Log4J also ships with a
      number of <literal moreinfo="none">Layout</literal> implementations,
      including <literal moreinfo="none">XMLLayout</literal>, <literal
      moreinfo="none">PatternLayout</literal>, <literal
      moreinfo="none">HTMLLayout</literal>, and <literal
      moreinfo="none">DateLayout</literal>.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For more information about the Apache Logging Services project,
      see the Logging Services project page at <ulink
      url="http://logging.apache.org">http://logging.apache.org</ulink>. For
      more information about the Apache Log4J project, see the Log4J project
      page at <ulink
      url="http://logging.apache.org/log4j/docs/">http://logging.apache.org/log4j/docs/</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-log4j-properties" label="7.13" role="Recipe">
    <title>Configuring Log4J with a Properties File</title>

    <sect2>
      <title>Problem</title>

      <para>You need to use Log4J, and you would like to configure it with a
      properties file.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use the <literal moreinfo="none">BasicConfigurator</literal> to
      read a <filename moreinfo="none">log4j.properties</filename> file
      resource from the classpath. The following code configures Log4J from a
      resource named <filename moreinfo="none">log4j.properties</filename>,
      and logs two messages:</para>

      <programlisting format="linespecific" id="I_7_tt312">import org.apache.log4j.PropertyConfigurator;
import org.apache.log4j.Logger;

URL log4Jresource = this.getClass( ).getResource("log4j.properties");
PropertyConfigurator.configure( log4Jresource );

Logger log = Logger.getLogger( "com.discursive.SomeApp" );
log.info( "This is a log message" );
log.error( "This is an error message" );</programlisting>

      <para>The <filename moreinfo="none">log4j.properties</filename> file
      contains a basic Log4J configuration that sets the root category logging
      level to <literal moreinfo="none">WARN</literal> and the application's
      logging level to <literal moreinfo="none">DEBUG</literal>:</para>

      <programlisting format="linespecific" id="I_7_tt313"># All logging output sent to standard out and a file
# WARN is default logging level
log4j.rootCategory=WARN, STDOUT, FILE

# Application logging level is DEBUG
log4j.logger.com.discursive=DEBUG

# Configure the Standard Out Appender
log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender
log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout
log4j.appender.STDOUT.layout.ConversionPattern=%5p (%F:%L) %m%n

# Configure a rolling file appender
log4j.appender.FILE=org.apache.log4j.RollingFileAppender
log4j.appender.FILE.File=output.log
log4j.appender.FILE.MaxFileSize=2000KB
log4j.appender.FILE.MaxBackupIndex=5
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=%d %-5p %c - %m%n</programlisting>

      <para>This example prints a single info message to the console with the
      following format:</para>

      <programlisting format="linespecific" id="I_7_tt314"> INFO (Sample.java:24) This is a log message
ERROR (Sample.java:25) This is an error message</programlisting>

      <para>The <literal moreinfo="none">rootCategory</literal> is configured
      to send all log messages to the console and a <literal
      moreinfo="none">RollingFileAppender</literal>. A file named <filename
      moreinfo="none">output.log</filename> contains the following content
      after this code has been executed:</para>

      <programlisting format="linespecific" id="I_7_tt315">2004-06-14 00:12:22,324  INFO Sample - This is a log message
2004-06-14 00:12:22,326 ERROR Sample - This is an error message</programlisting>
    </sect2>

    <sect2>
      <title>Discussion</title>

      <para><literal
      moreinfo="none">PropertyConfigurator.configure()</literal> <indexterm
          id="app-infra-ITERM-2844" significance="normal">
          <primary>PropertyConfigurator.configure( ) method</primary>
        </indexterm> <indexterm id="app-infra-ITERM-2845"
          significance="normal">
          <primary>methods</primary>

          <secondary>PropertyConfigurator.configure( )</secondary>
        </indexterm> takes a URL referencing a resource to be loaded from the
      classpath. This properties file is read and Log4J is configured to send
      all messages to both the console and a file. Content is written to a
      file using a <literal moreinfo="none">RollingFileAppender</literal>,
      which writes to a file until it reaches a configurable maximum size (2
      MB). Once this size has been reached, a <literal
      moreinfo="none">RollingFileAppender</literal> will move the existing
      <filename moreinfo="none">output.log</filename> file to a file named
      <filename moreinfo="none">output.log.1</filename> and create a new
      <filename moreinfo="none">output.log</filename> file. As configured in
      the previous example, the <literal
      moreinfo="none">RollingFileAppender</literal> will keep five backup log
      files, moving <filename moreinfo="none">output.log.1</filename> to
      <filename moreinfo="none">output.log.2</filename> and <filename
      moreinfo="none">output.log</filename> to <filename
      moreinfo="none">output.log.1</filename> the next time a log file's
      maximum size has been reached.</para>

      <para>The Solution configures the default logging level to be <literal
      moreinfo="none">WARN</literal>, meaning that all log messages lower on
      the level hierarchy will not be sent to appenders. Log4J has five
      default levels, and they are listed in order of importance: <literal
      moreinfo="none">DEBUG</literal>, <literal
      moreinfo="none">INFO</literal>, <literal moreinfo="none">WARN</literal>,
      <literal moreinfo="none">ERROR</literal>, and <literal
      moreinfo="none">FATAL</literal>. If a category is configured with a
      logging level of <literal moreinfo="none">ERROR</literal>, only <literal
      moreinfo="none">ERROR</literal> and <literal
      moreinfo="none">FATAL</literal> messages are sent to appenders, and if a
      category is configured with a logging level of <literal
      moreinfo="none">DEBUG</literal>, all logging messages are sent to
      appenders. If you are only interested in the debugging output from your
      own program, set the <literal moreinfo="none">rootCategory</literal> to
      a high logging level, and override that level for your application's
      classes. <literal
      moreinfo="none">log4j.logger.com.discursive=DEBUG</literal> overrides
      the <literal moreinfo="none">rootCategory</literal>'s logging level for
      every topic at or below the <literal
      moreinfo="none">com.discursive</literal> logging category.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>The properties file shown in the Solution should be used as a
      starting point for Log4J configuration. For more information about
      various implementations of <literal moreinfo="none">Appender</literal>
      or syntax for <literal moreinfo="none">ConversionPattern</literal>, see
      the Log4J <indexterm class="endofrange" id="app-infra-ITERM-2846"
      significance="normal" startref="app-infra-ITERM-2839"></indexterm>
      <indexterm class="endofrange" id="app-infra-ITERM-2847"
      significance="normal" startref="app-infra-ITERM-2840"></indexterm>
      <indexterm class="endofrange" id="app-infra-ITERM-2848"
      significance="normal" startref="app-infra-ITERM-2841"></indexterm>
      <indexterm class="endofrange" id="app-infra-ITERM-2849"
      significance="normal" startref="app-infra-ITERM-2842"></indexterm>
      <indexterm class="endofrange" id="app-infra-ITERM-2850"
      significance="normal" startref="app-infra-ITERM-2843"></indexterm>API
      documentation at <ulink
      url="http://logging.apache.org/log4j/docs/api/index.html">http://logging.apache.org/log4j/docs/api/index.html</ulink>.</para>
    </sect2>
  </sect1>

  <sect1 id="app-infra-sect-log4j-xml" label="7.14" role="Recipe">
    <title>Configuring Log4J with XML</title>

    <sect2>
      <title>Problem</title>

      <para>You need to configure Log4J <indexterm id="app-infra-ITERM-2851"
          significance="normal">
          <primary>Apache Log4J</primary>

          <secondary>configuration</secondary>
        </indexterm> <indexterm id="app-infra-ITERM-2852"
          significance="normal">
          <primary>configuration</primary>

          <secondary>Apache Log4J</secondary>
        </indexterm> <indexterm id="app-infra-ITERM-2853"
          significance="normal">
          <primary>applications</primary>

          <secondary>Log4J</secondary>
        </indexterm> <indexterm id="app-infra-ITERM-2854"
          significance="normal">
          <primary>XML (Extensible Markup Language)</primary>

          <secondary>Log4J</secondary>
        </indexterm> <indexterm id="app-infra-ITERM-2855"
          significance="normal">
          <primary>documents</primary>

          <secondary>XML</secondary>

          <tertiary>Log4J</tertiary>
        </indexterm>with an XML document.</para>
    </sect2>

    <sect2>
      <title>Solution</title>

      <para>Use the <literal moreinfo="none">DOMConfigurator</literal> to
      configure Log4J with an XML document. The following code configures
      Log4J from a resource named <filename
      moreinfo="none">log4j.xml</filename>, and logs two messages:</para>

      <programlisting format="linespecific" id="I_7_tt316">import org.apache.log4j.DOMConfigurator;
import org.apache.log4j.Logger;

URL log4Jresource = this.getClass( ).getResource("log4j.xml");
DOMConfigurator.configure( lof4Jresource );

Logger log = Logger.getLogger( "com.discursive.SomeApp" );
log.info( "This is a log message" );
log.error( "This is an error message" );</programlisting>

      <para>The <filename moreinfo="none">log4j.xml</filename> file contains a
      basic Log4J configuration, which sets the root category logging level to
      <literal moreinfo="none">WARN</literal>, and the application's logging
      level to <literal moreinfo="none">DEBUG</literal>. This XML document
      configures Log4J exactly the way that Log4J was configured by the
      previous example; log messages are sent to both the console and a
      <literal moreinfo="none">RollingFileAppender</literal>:</para>

      <programlisting format="linespecific" id="I_7_tt317">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;configuration configDebug="true"&gt;

    &lt;appender name="STDOUT" class="org.apache.log4j.ConsoleAppender"&gt;
        &lt;layout class="org.apache.log4j.PatternLayout"&gt;
            &lt;param name="ConversionPattern" value="%5p (%F:%L) %m%n"/&gt;
        &lt;/layout&gt;        
    &lt;/appender&gt;

    &lt;appender name="FILE" class="org.apache.log4j.RollingFileAppender"&gt;
           &lt;param name="File" value="output.log" /&gt;    
           &lt;param name="MaxFileSize" value="2000KB" /&gt;    
           &lt;param name="MaxBackupIndex" value="5" /&gt;    
           &lt;layout class="org.apache.log4j.PatternLayout"&gt;
             &lt;param name="ConversionPattern" value="%d %-5p %c - %m%n"/&gt;
           &lt;/layout&gt;      
    &lt;/appender&gt;

    &lt;category name="com.discursive"&gt;
      &lt;priority value="DEBUG" /&gt;
    &lt;/category&gt;
    
    &lt;root&gt;
       &lt;priority value="WARN"/&gt;
       &lt;appender-ref ref="STDOUT" /&gt; 
       &lt;appender-ref ref="FILE" /&gt; 
    &lt;/root&gt;
    
&lt;/configuration&gt;</programlisting>

      <para>This configuration will produce the same output as the previous
      recipe. The only difference between this recipe and the last is that XML
      is used to configure Log4J.</para>
    </sect2>

    <sect2>
      <title>See Also</title>

      <para>For more information about Log4J, see the Log4J project page at
      <ulink
      url="http://logging.apache.org/log4">http://logging.apache.org/log4</ulink>.</para>
    </sect2>
  </sect1>
</chapter>
